{
  "categories": {
    "achtsamkeit": {
      "title": "Achtsamkeit",
      "summary": "Diese Kategorie beinhaltet eine Zusammenfassung der Achtsamkeit.",
      "slug": "achtsamkeit",
      "items": [
        "Z1ohpIo",
        "Z2guUQd",
        "1pQWxn",
        "NEzhm",
        "Z1eHhoR",
        "A1eHhoR",
        "B1eHhoR",
        "C1eHhoR"
      ]
    },
    "beziehungen": {
      "title": "Beziehungen",
      "summary": "Diese Kategorie beinhaltet eine Zusammenfassung von Beziehungen.",
      "slug": "beziehungen",
      "items": [
        "2eREkv",
        "2rF4Hq",
        "ZXcqct",
        "ZXTLWo",
        "Z1eEvQQ",
        "1KaHiT"
      ]
    },
    "emotionsregulation": {
      "title": "Emotionsregulation",
      "summary": "Diese Kategorie beinhaltet eine Zusammenfassung von der Emotionsregulation.",
      "slug": "emotionsregulation",
      "items": [
        "1KaHiq",
        "2Abcp8",
        "Prx63E",
        "2BaHiq",
        "ACbcp8",
        "vRu63E",
        "T6wERg",
        "IThqo9",
        "LoQaT4"

      ]
    },
    "http": {
      "title": "HTTP",
      "summary": "This category summarizes best practices regarding HTTP interactions and modules.",
      "slug": "http",
      "items": [
        "2oN0jv"
      ]
    },
    "ngrx": {
      "title": "NgRx",
      "summary": "This category summarizes best practices regarding NgRx.",
      "slug": "ngrx",
      "items": [
        "Z2exNXo",
        "iglD3",
        "ZPhLz2",
        "1kimRN",
        "ZlteSK",
        "1t4mCT",
        "Myhw4"
      ]
    },
    "performance": {
      "title": "Performance",
      "summary": "This category contains a list of practices which will help us boost the performance of our Angular applications. It covers different topics - from server-side pre-rendering and bundling of our applications, to runtime performance and optimization of the change detection performed by the framework.",
      "slug": "performance",
      "items": [
        "ZfxFUd",
        "CjbpO",
        "FGjYL"
      ]
    },
    "router": {
      "title": "Router",
      "summary": "This category summarizes best practices regarding routing.",
      "slug": "router",
      "items": [
        "Zy4xtr",
        "5ScV4",
        "Z165VzV",
        "Z2nRe1e",
        "lGMp8"
      ]
    },
    "rxjs": {
      "title": "RxJS",
      "summary": "This category summarizes best practices regarding RxJS.",
      "slug": "rxjs",
      "items": [
        "Z1eFwa9",
        "ZzpwmT",
        "Iqkhs",
        "Z3uGQp",
        "fztee",
        "Z1vCEKO"
      ]
    },
    "tooling": {
      "title": "Tooling",
      "summary": "This category summarizes best practices regarding tooling.",
      "slug": "tooling",
      "items": [
        "Z1uf1Rj",
        "Z2fVpC5",
        "PWWcx"
      ]
    },
    "typescript": {
      "title": "Typescript",
      "summary": "This category summarizes best practices regarding Typescript.",
      "slug": "typescript",
      "items": [
        "Z2hzSxp",
        "23KPo0",
        "12Aq23",
        "ZRBVWY",
        "ZEhkug"
      ]
    }
  },
  "items": {
    "Z2guUQd": {
      "id": "Z2guUQd",
      "slug": "wahrnehmen",
      "category": "achtsamkeit",
      "title": "wahrnehmen",
      "content": "<h3>Bedeutet: Sich auf das einzulassen, was im Augenblick da ist. Das Kommen und Gehen Deiner Gedanken und Gefühle zu erleben, ohne darauf zu reagieren.</h3>\n<p>Suche Dir einen Gegenstand aus und schaue ihn genau an. Beobachte, wie er aussieht und wie er sich anfühlt. Zünde eine Kerze an und beobachte die Flamme. Nimm wahr, was geschieht, ohne darauf zu reagieren. Mache Dir eine Tasse Kaffee oder Tee und trinke Schluck für Schluck ganz bewusst und langsam. Lass Gedanken und Gefühle an Dir vorbeiziehen. Lege oder setze Dich auf ein Sofa und spüre, wie sich Dein Körper anfühlt. Beobachte jeden Gedanken, jedes Gefühl und jede Handlung. Beobachte Deine Gedanken, Gefühle und Sinneswahrnehmungen. Nimm eine Dusche. Wie fühlt sich das Wasser auf Deiner Haut an? Welche Gefühle nimmst Du wahr?</p>\n<p>Wahrnehmen“ bedeutet, sich auf das einzulassen, was im Augenblick „da“ ist. Dazu gehört die Welt um Sie herum, aber auch Ihre Innenwelt, Ihre Gefühle und Ihre Gedanken. Achten Sie darauf, was Sie erleben. Beobachten Sie das Kommen und Gehen von Gedanken und Gefühlen. Schieben Sie Gedanken und Gefühle nicht weg. Achten Sie auf Ihre Wahrnehmung, ohne davon eingefangen zu werden. Erleben Sie, ohne auf Ihre Wahrnehmung zu reagieren.</p>\n<p>Wenn Sie Ihre Aufmerksamkeit nach innen richten, schauen Sie Ihre Gedanken an. Sie kommen und gehen, wie Wolken am Himmel. Achten Sie auf jedes Gefühl, wie es aufsteigt und wieder entschwindet, wie Wellen im Ozean. Nehmen Sie wahr, was von außen durch Ihre Sinne zu Ihnen gelangt. Schauen Sie an, wie andere Menschen handeln und ihre Gefühle ausdrücken.</p>\n<p>Übungen zum „Wahrnehmen“. Den ersten Gedanken wahrnehmen. Geräusche wahrnehmen (von draußen, im Raum, von Kindern). Gerüche wahrnehmen (von draußen, beim Kochen, beim Essen, in einem Laden, in dem Parfüm verkauft wird). Geschmack wahrnehmen (von Obst, Kräutern; Bonbons konzentriert im Mund zergehen lassen, langsam kauen). Wahrnehmen, wie man auf dem Stuhl sitzt, etwas in der Hand hält ...</p>\n<p>Beispiel: Finger über Oberlippe. Streichen Sie mit Ihrem Daumennagel einmal fest über Ihre Oberlippe (unter der Nase). Nehmen Sie sich Zeit, wahrzunehmen, was sich in diesem Körperbereich ändert. Beobachten Sie, wie Sie anfangen zu bewerten. Lassen Sie die Gedanken gehen und kehren Sie zurück zu Ihren Empfindungen. Versuchen Sie, sich weiter zu konzentrieren ...</p>\n<h3>Übungen zum Wahrnehmen</h3>\n<p>Die Kamera. Setzen Sie sich auf eine Bank an einem belebten Platz und nehmen Sie sich 10 Minuten Zeit. Weder 9 Minuten, noch 11 Minuten, genau 10 Minuten. Stellen Sie sich vor, Ihr Kopf wäre eine Kamera und Ihre Augen das Objektiv. Sie „filmen“ alles, was Sie sehen und beobachten, was Sie filmen, als ob Ihnen im Kino alles gezeigt wird. Sie haben den Film noch nie gesehen, alles ist neu und alles passiert genau ein einziges Mal und dann nie wieder. Wenn Sie abgelenkt werden oder beginnen, sich Urteile über die Leute zu bilden, bemerken Sie es, lächeln Sie darüber und konzentrieren Sie sich wieder auf Ihren Film. Diese Übung können Sie natürlich an verschiedenen Orten durchführen. Wenn Sie Angst vor Menschen haben, besteht die Möglichkeit, dass Sie sich zunächst einen ruhigen Platz suchen. Erst später, wenn Sie gelernt haben, Gefühle kommen und gehen zu lassen, können Sie die Kamera-Übung an „interessantere“ Plätze verlegen.</p>\n<p>Der Rekorder. Nehmen Sie sich 10 Minuten Zeit, stellen Sie sich den Küchenwecker. Suchen Sie einen Ort, den Sie mögen, oder benützen Sie den Ort, an dem Sie sich gerade befinden. Diese Übung können Sie überall durchführen. Schließen Sie (wenn möglich) die Augen und konzentrieren Sie sich ausschließlich auf die Geräusche, die an Sie herangetragen werden. Stellen Sie sich vor, Ihr Kopf ist ein Aufnahmegerät und die Ohren sind das Mikrophon. Alles wird aufgenommen, einfach so, wie es klingt. Wenn Gedanken oder Gefühle auftauchen, heißen Sie sie willkommen, lächeln Sie sie an und lassen Sie sie ziehen. Sie sind in der Welt der Töne. Jeder einzelne Ton entsteht nur ein einziges Mal. Nur jetzt. Und Sie dürfen ihn hören.</p>\n<p>Beobachten Sie Ihren Atem. Nehmen Sie sich 10 Minuten Zeit und setzen Sie sich bequem hin. Sie können auf einem Stuhl sitzen oder auf einem Sitzkissen. Achten Sie darauf, dass Ihre Wirbelsäule aufrecht ist und sich ohne Anstrengung selbst trägt. Die Hände ruhen auf den Oberschenkeln. Sie können die Augen offen halten oder schließen, wie es Ihnen angenehmer ist. Nun kon- zentrieren Sie sich auf Ihren Atem. Beobachten Sie, wie der Atem in Ihren Körper hinein- strömt und wie er wieder hinausströmt. Beobachten Sie, wohin sich Ihr Atem ausbreitet und wie sich Ihr Körper mit der Atmung verändert. Begleiten Sie Ihren Atem mit all Ihrer Aufmerksamkeit. Wenn Ihnen Gedanken kommen oder Gefühle, lächeln Sie ihnen zu und lassen Sie sie gehen.</p>\n"
    },
    "Z1ohpIo": {
      "id": "Z1ohpIo",
      "slug": "intuitives-wissen-wise-mind",
      "category": "achtsamkeit",
      "title": "intuitives wissen (wise mind)",
      "content": "<h3>Bedeutet: Gefühl und Verstand in ein Gleichgewicht zu bringen, Intuitives Wissen und Verstehen anzuwenden.</h3>\n<p>Versuche, mithilfe intuitiven Wissens zu entscheiden. Nenne etwas, das Du an Dir selbst genau in diesem Moment validieren kannst. Was sagt Dir Dein Gefühl? Was sagt Dir Dein Verstand? Kannst Du ein Gleichgewicht zwischen Gefühl und Verstand herstellen?</p>\n<p>Wir wissen, dass Achtsamkeitsübungen helfen, körperlichen und seelischen Stress zu vermindern. Achtsamkeit ist die Basis aller Skills! Nur wenn Sie wahrnehmen, dass Sie z. B. unter Hochspannung stehen, können Sie Stresstoleranzskills einsetzen.</p>\n<p>Achtsamkeit kann man mehrmals am Tag für wenige Minuten üben, z. B. „achtsames Gehen“, „achtsames Essen“ und „achtsames Hören“ ...Die Wirksamkeit der Achtsamkeit ist überprüfbar. Die ersten Erfolge stellen sich nach fünf bis acht Wochen ein! Sie werden den Erfolg der Übungen dadurch bemerken, dass nach einer gewissen Zeit in bestimmten Situationen Erinnerungen wach werden, die Sie aufmerksam machen und Sie ermahnen in Form von:</p>\n<p>Ich wollte nicht mehr bewerten ... Ich wollte achtsamer essen, hören, programmieren, gehen ... Ich wollte mehr auf meine Intuition vertrauen ..</p>\n<p>Beginnen Sie mit einfachen Übungen! Wenn Sie Schwierigkeiten haben, Ihren Körper wahrzunehmen, oder wenn Sie leicht Panikattacken oder Flashbacks bekommen, wenn Sie die Augen schließen, beginnen Sie mit Übungen, die die Aufmerksamkeit auf Sehen, Hören, Riechen oder Schmecken richten.</p>\n<p>Mit zunehmender Übung können Sie mit Atemübungen oder der Körperwahrnehmung weitermachen. Grundregel: Sie sollten die jeweils vorgeschlagene Übungsdauer genau einhalten. Natürlich ist es auch wichtig, Ihren eigenen Grenzen gegenüber achtsam zu sein.</p>\n<p>Besorgen Sie einen Küchenwecker. Er hilft Ihnen, sich ganz auf die Übungen zu konzentrieren. Die Übungen gliedern sich in die drei Teile der „WAS-Fertigkeiten“: Übungen zum Wahrnehmen. Übungen zum Beschreiben. Übungen zum Teilnehmen</p>\n"
    },
    "1pQWxn": {
      "id": "1pQWxn",
      "slug": "beschreiben",
      "category": "achtsamkeit",
      "title": "beschreiben",
      "content": "<h3>Beschreiben</h3>\n<p>Benenne Deine Erfahrungen. Lass ein Gedanke nur einen Gedanken sein und ein Gefühl nur ein Gefühl. Sprich laut mit Dir selbst, beschreibe detailliert den Raum, in dem Du Dich befindest. Überprüfe, welches Gefühl Du gerade hast. Beschreibe es. Wo kannst du es im Körper fühlen? Wie fühlt es sich an? Wähle einen Gegenstand im Raum. Untersuche ihn gründlich und mache eine ausführliche Beschreibung seiner Eigenschaften wie Gewicht, Grösse, Form, Farbe und Anwendungsgebiete. Mache eine Achtsamkeitsübung. Beschreibe, welche Sinneswahrnehmungen Du in Deinem Körper beobachtest. Sind da auch Gefühle? Wenn ja, welche?</p>\n<p>Was heißt „Beschreiben“? „Beschreiben“ heißt, Worte zu finden für Gedanken und Gefühle. Schon durch die Bezeichnung von Gedanken und Gefühlen verschaffen wir uns Abstand von ihnen. Geben Sie dem, was Sie erleben, eine Bezeichnung. Benennen Sie die entstehenden Gedanken und Gefühle. Sie können sich z. B. sagen: „Ein Gefühl von Traurigkeit ist gerade in mir aufgetaucht“ oder „Die Bauchmuskulatur spannt sich an“. Beschreiben Sie, was gerade geschieht. Benennen Sie ein Gefühl, einen Gedanken und eine Handlung. Lassen Sie sich nicht von deren Inhalten gefangen nehmen.</p>\n<p>Übungen zum „Beschreiben“. Beschreiben, wie man auf dem Stuhl sitzt oder wie sich die Hose anfühlt. Den Raum, ein Gebäude, den Park oder die Natur beschreiben. Entstehende Gedanken beschreiben. Spürbare Gefühle beschreiben. Bilder beschreiben. Das Gesicht des Gegenübers, eigene Körperteile oder Körperhaltung beschreiben.</p>\n<p>Beispiel: Die Wand beschreiben. Heben Sie Ihre Augen und blicken Sie auf die gegen- überliegende Wand. Beschreiben Sie mit Ihren Worten ganz genau, was Sie sehen. Beschreiben Sie die Wand so, dass jemand, der am anderen Ende des Universums sitzt und noch nie eine Wand gesehen hat, sich ein ganz genaues Bild davon machen kann. Sicherlich treten jetzt wieder störende Gedanken und Gefühle auf („so eine blöde Übung ...“ oder „ich habe jetzt gerade keine Lust ...“.). Versuchen Sie, die Gedanken ziehen zu lassen und fahren Sie mit dem Beschreiben fort.</p>\n<h3>Übungen zum Beschreiben</h3>\n<p>Die Reporterin. Nehmen Sie sich 15 Minuten Zeit, stellen Sie Ihren Küchenwecker. Gehen Sie an einen belebten Ort. Nehmen Sie ein Diktiergerät oder einen Kassettenrekorder mit Mikrophon mit. Notfalls geht es auch ohne alles. Stellen Sie sich vor, Sie sind eine Star-Journalistin. Sie wurden aus der Umlaufbahn des 2. Andromeda-Nebels auf die Erde gebeamt. Sie sind gut vorbereitet und sehen aus wie ein normaler Mensch, na ja, ziemlich, jedenfalls merkt kaum ein Mensch, dass Sie von einem anderen Stern kommen. Sie machen eine Reportage für die Leute zu Hause. Sie beschreiben sehr genau, was Sie sehen, ohne die üblichen Bedeutungszusammenhänge zu kennen (schließlich sind Sie All-Touristin!). Trotzdem möchten Ihre Leute dort oben zum Beispiel genau erklärt haben, was ein Anzug ist oder ein Nabel-Piercing, auch über Autos und ähnlichen Quatsch haben die sich nie Gedanken gemacht. Und was ist bitte eine Plastiktüte, auf der ALDI steht? Also ...</p>\n<p>Blinden-Kunst. Diese Übung können Sie alleine machen und auch gut mit einer Freundin, einem Kind, notfalls auch mit einem Haustier, das Ihnen geduldig zuhört. Suchen Sie die Abbildung eines Gemäldes (besser ein wenig bekanntes). Legen Sie es so, dass nur Sie es sehen können. Stellen Sie sich vor, die Freundin wäre erst vor kurzem erblindet und Sie möchten, dass sie sich eine sehr genaue Vorstellung von diesem Bild machen kann. Nun beschreiben Sie das Bild oder einen Ausschnitt des Bildes so genau wie irgend möglich. Es ist gut, wenn vor den blinden Augen Ihrer Freundin ein sehr konkretes Bild entsteht. Sie wird überrascht sein, wie ähnlich es ist, wenn sie das Original dann zu sehen bekommt.</p>\n<p>Spiegelbild. Diese Übung ist schwierig, insbesondere wenn Sie viel Übung darin haben, sich selbst zu beschimpfen, abzuwerten und schlecht zu behandeln. Daher: Nehmen Sie sich anfangs nur wenige Minuten Zeit, später können Sie es dann länger machen. Nehmen Sie sich ein Mikrophon oder, wenn Ihnen eines fehlt, sprechen Sie auf alle Fälle laut. Stellen Sie sich (angezogen) vor einen Spiegel und beschreiben Sie, was Sie sehen. Sprechen Sie von sich in der dritten Person: „Ich sehe eine junge Frau, mit schwarzen Haaren ...“ Und wichtig: Achten Sie auf die Wie-Fertigkeiten: Annehmend, das heißt ohne Wertung be- schreiben. Wann immer sie sich dabei ertappen zu bewerten, nehmen Sie das lächelnd zur Kenntnis und probieren Sie die Aussage noch einmal, ohne zu bewerten ...</p>\n"
    },
    "NEzhm": {
      "id": "NEzhm",
      "slug": "teilnehmen",
      "category": "achtsamkeit",
      "title": "teilnehmen",
      "content": "<h3>Teilnehmen</h3>\n<p>Singe ein fröhliches Lied. Tauche ganz in die Welt des Liedes ein. Beschäftige Dich mit etwas, was Dir gefällt! Konzentriere Dich vollständig darauf und sei mit ganzem Herzen dabei. Du kannst beispielsweise malen, stricken, Seifen oder Kerzen machen. Sprich mit juemandem in Deiner Nähe. Schenke dieser Person Deine volle Aufmerksamkeit. Lies ein Buch, Magazin, oder ein Comic. Lass Dich vom Inhalt in eine andere Welt entführen. Lächle die Menschen, denen Du begegnest, aus ganzem Herzen an.</p>\n<p>Was bedeutet „Teilnehmen“? „Teilnehmen“ bedeutet „Aufgehen“ im gegenwärtigen Moment. Handeln Sie ganz aus sich selbst heraus. Tun Sie genau das, was in einer Situation notwendig ist – wie eine gute Tänzerin, die „eins“ ist mit der Musik, dem Partner und den anderen Paaren im Raum, weder verkrampft noch passiv und kraftlos. Werden Sie „eins“ mit dem, was Sie gerade tun und erleben Sie. Handeln Sie und erleben Sie, ohne darüber nachzugrübeln, was gerade los ist.</p>\n<p>Übungen zum Teilnehmen. Geschirr abspülen, Tee oder Kaffee kochen, putzen, aufräumen. Die eigene Tasche aus- und einpacken. Ein Ei aufstellen. Tanzen, reiten, ein Instrument spielen, spazieren gehen, auf einem Brett balan- cieren ...</p>\n<p>Beispiel: Im Raum gehen. Wenn Sie das gelesen haben, dann stehen Sie auf und laufen in ruhigem Tempo mit geöffneten Augen eine Runde rückwärts durch Ihr Zimmer. Sicherlich treten störende Gedanken und Gefühle auf. Versuchen Sie, die Gedanken ziehen zu lassen und konzentrieren Sie sich schlicht darauf, möglichst wenig anzustoßen.</p>\n<h3>Übungen zum Teilnehmen</h3><p>Das rohe Ei. Nehmen Sie sich ein Ei aus dem Kühlschrank, warten Sie noch ein bisschen mit der Pfanne und versuchen Sie, es auf einer Tischplatte mit der flachen Seite zum Stehen zu bringen (Teppichboden ist tabu). Nehmen Sie sich Zeit, es wird klappen. Und der Kolumbus-Trick ist wirklich überflüssig! Sie können beobachten, was Ihnen dabei für Gedanken durch den Kopf gehen: Wie wär’s mit „Das schaffe ich nie, da bin ich zu blöd dazu ...“, „ausgerechnet ich habe wieder das falsche Ei! ...“?</p>\n<p>Putzen. Nehmen Sie sich eine halbe Stunde Zeit, stellen Sie sich den Wecker. Nun beginnen Sie ganz einfach, die Hausarbeit zu verrichten, Putzen oder Geschirrspülen. Bleiben Sie mit Ihren Gedanken sehr nah und sehr sanft bei Ihrer Tätigkeit. Beobachten Sie alle Ihre Handgriffe, Ihr Arbeitstempo, das was eben passiert. Wann immer Sie abgelenkt werden, lächeln Sie darüber und richten Sie Ihre Aufmerksamkeit wieder auf Ihre Arbeit. Nur das. All das, was Sie erleben, erleben Sie nur ein einziges Mal. Nur jetzt. Und nur Sie.</p>\n<p>Zählen. Nehmen Sie sich 15 Minuten Zeit, stellen Sie sich Ihren Wecker. Setzen Sie sich aufrecht hin, sodass die Wirbelsäule sich selbst trägt. Wenn Sie möchten, schließen Sie die Augen. Beginnen Sie im Rhythmus Ihres Atems zu zählen. Von 1 bis 10. Konzentrieren Sie sich ausschließlich auf das Zählen. Wenn Sie bei 10 angekommen sind, beginnen Sie erneut bei 1. Wann immer Ihnen Gedanken oder Bilder oder Gefühle entstehen, lächeln Sie sie an, lassen Sie sie ziehen und beginnen Sie erneut bei 1 zu zählen.</p>\n"
    },
    "Z1eHhoR": {
      "id": "Z1eHhoR",
      "slug": "annehmend-nicht-bewertend",
      "category": "achtsamkeit",
      "title": "annehmend nicht bewertend",
      "content": "<h3>Annehmend (nicht bewertend)</h3>\n<p>Beobachte Deine Gedanken, ob positiv oder negativ. Bewerte sie nicht. Suche einen Gegenstand und beschreibe ihn detailliert mit Hilfe Deiner Sinneseindrücke. Mache keine bewertende Angaben. Sprich mit juemandem in Deiner Nähe. Schenke dieser Person Deine volle Aufmerksamkeit. Beobachte Deine Gedanken und zähle die Anzahl Bewertungen, die Du in einem Zeitraum von 15 Minuten machst. Wenn Dir auffällt, dass Du bewertest, versuche stattdessen rein beschreibende Worte zu verwenden.</p>\n<p>Bedeutet: die Situation wahrzunehmen, wie sie ist und zu akzeptieren. Die Situation nicht zu beurteilen und zu bewerten und sie nicht fest- halten zu wollen.</p>\n<p>Versuchen Sie annehmend (d. h. nicht bewertend), konzentriert und wirkungsvoll zu sein. Das nennen wir WIE-Fertigkeiten.</p>\n<p>Was heißt „annehmend“? „Annehmend“ heißt, die Situation, so wie sie sich im Augenblick darstellt, wahrzu- nehmen und in ihrem „Sosein“ zu akzeptieren. Nehmen Sie etwas wahr, ohne es zu beurteilen. Lassen Sie unangenehme Gedanken und Gefühle vorbeiziehen, ohne sie zu verurteilen oder festzuhalten. Diese Aussage bedeutet nicht, dass man die Situation billigt oder gutheißt. Es ist sehr wichtig, sich diesen Unterschied zu verdeutlichen. Viele Borderline-Patientinnen haben sehr traumatische Erfahrungen gemacht. Das war oft schrecklich, ist aber nicht mehr zu ändern. Indem wir sie annehmen, sind diese Erfahrungen Teil unserer Geschichte und wir hören auf, sie als Gewicht herumzuschleppen. Das Gegenteil von „Annehmen“ ist also „Bewerten“: „Das soll anders sein, das ist blöde, das ist das Letzte.“ Die Bewertung ist der Weg in das Gefühl. Ohne bewertendes Urteil hat die Emotion wenig Macht. „Don’t judge“ – „Bewerten Sie nicht!“ ist daher ein Schlagwort in der DBT.</p>\n"
    },
    "A1eHhoR": {
      "id": "A1eHhoR",
      "slug": "konzentriert",
      "category": "achtsamkeit",
      "title": "konzentriert",
      "content": "<h3>Konzentriert</h3>\n<p>Mache etwas vollkommen Neues, bleibe bei dieser einen Sache und lass Dich nicht ablenken. Konzentriere Dich auf das, was Du tust. Mache nicht zwei Dinge gleichzeitig. Konzentriere Dich auf Deinen Atem. Fühle Deinen Atem, zähle die Atemzüge und verändere Deinen Atemrhytmus. Wähle einen Gegenstand, zum Beispiel einen Stift. Versuche, Dir dreissig Dinge zu überlegen, wofür man diesen Gegenstand gebrauchen könnte. Mach einen Spaziergang. Mach den Abwasch und konzentriere Dich auf jede Bewegung und auf jeden Sinneseindruck. Wie fühlen sich Deine Hände im Wasser an?</p>\n<p>Konzentriere Dich darauf, nur eine einzige Sache zu einem bestimmten Zeitpunkt zu tun - und nicht mehrere gleichzeitig. Hier und Jetzt. Jeder Moment ist neu, jeder Schritt findet im Hier und Jetzt statt.</p>\n<p>Was heißt „Konzentriert“? Es ist sinnvoll, sich immer nur auf eine Sache zu konzentrieren. Bleiben Sie bei sich selbst und bei dieser Sache. Wenn Sie essen, dann essen Sie. Wenn Sie gehen, dann gehen Sie. Wenn Sie baden, dann baden Sie. Wenn Sie sich in einem Gespräch befinden, dann konzentrieren Sie sich auf den Kontakt mit der anderen Person. Tun Sie alles mit Ihrer ganzen Aufmerksamkeit. Glauben Sie, ein Musiker macht gute Musik, wenn er während des Konzertes etwa überlegt, wie er seinen nächsten Urlaub verbringen könnte? Glauben Sie, ein Kind, das versucht, seinem Lieblingshund ein Kunststück beizubringen, denkt darüber nach, was es bald zum Geburtstag bekommen wird? Glauben Sie, jemand der zuhört, kann wirklich gleichzeitig an seine eigenen Sorgen denken ...?</p>\n<p>Beschäftigen Sie sich nur mit einer Sache. Lassen Sie sich nicht ablenken. Ihre ganze Aufmerksamkeit ist notwendig, um wirklich lebendig und achtsam zu bleiben. Wenn andere Geschehnisse, Gedanken oder heftige Gefühle Sie ablenken, lassen Sie sie los und gehen zurück zu dem, was Sie gerade tun – immer wieder. Wenn Sie merken, dass Sie zwei Dinge zur gleichen Zeit tun, hören Sie auf und wenden Sie Ihre Aufmerksamkeit einer Sache zu. Natürlich werden Sie gestört. Es kommen Gedanken und Gefühle. Diese sind wie ein Nebel, der einen Schleier vor Ihrer Wahrnehmung des Augenblicks legt. Lassen Sie Ihre Gedanken kommen und gehen wie Wolken. Lächeln Sie ihnen zu und konzentrieren Sie sich wieder. Wenn Sie von Personen gestört werden, betrachten Sie jede Person als persönliche direkte Herausforderung für Ihren Weg in die Achtsamkeit.</p>\n"
    },
    "B1eHhoR": {
      "id": "B1eHhoR",
      "slug": "annehmend-nicht-bewertend",
      "category": "achtsamkeit",
      "title": "wirkungsvoll",
      "content": "<h3>Wirkungsvoll</h3>\n<p>Nimm die Realität so wahr, wie sie wirklich ist, und nicht so, wie Du sie gerne hättest. Sei effizient: Mache das, was die Situation verlangt - nicht mehr und nicht weniger.</p>\n<p>Akzeptiere, dass die Situation so ist, wie sie ist, und nicht wie Du sie haben möchtest - und verhalte Dich entsprechend. Lass Gedanken wie 'Du müsstest' und 'Du solltest' sein.</p>\n<p>Es ist sinnvoll, das zu tun, was im Moment möglich ist. Wenn wir die richtigen Dinge zum richtigen Zeitpunkt tun, dann geht es leicht. Konzentrieren Sie sich also auf das, was möglich ist, tun Sie das, was in der Situation zu tun ist. Tun Sie etwas so, dass es funktionieren kann. Kümmern Sie sich nicht um „gerecht“ und „ungerecht“, „falsch“ und „richtig“, „man sollte“ und „man sollte nicht“. Setzen Sie alle notwendigen Fertigkeiten ein. Lassen Sie nicht-hilfreiche Gedanken und Gefühle vorüberziehen.</p>\n<p>Handeln Sie so gut Sie können und richten Sie sich nach den Erfordernissen der Situation, in der Sie sich gerade befinden – nicht nach der Situation, in der Sie gerne wären oder nach einer Situation, die angenehmer wäre ... Denken Sie in dieser Situation an Ihre Ziele und tun Sie das, was notwendig ist, um diese zu erreichen. Lassen Sie Rache, sinnlosen Ärger und übertriebenen Gerechtigkeitssinn sein, sie tun nur weh und bringen meist keinen Erfolg.</p>\n<p></p>\n<p></p>\n<p></p>\n"
    },
    "C1eHhoR": {
      "id": "C1eHhoR",
      "slug": "achtsamkeit-effekt",
      "category": "achtsamkeit",
      "title": "achtsamkeit effekt",
      "content": "<h3>Wie zeigt sich Achtsamkeit?</h3>\n<p>Durch Achtsamkeit bekommen Sie wirksame Kontrolle über sich selbst.</p>\n<p>Wenn Sie eine Situation klar und konzentriert wahrnehmen können, wird Ihnen deutlich, was als nächstes zu tun ist. Und da sollte nur ein Schritt zu einer Zeit getan werden, ein einziger Schritt. One Step at a time. Schritt für Schritt, einer nach dem anderen. Sie können sich von heftigen Gefühlen und Gedanken, die Sie überwältigen, distanzieren. Durch innere Achtsamkeit nehmen wir Gedanken wahr, ohne sie zu bewerten. Statt gegen sie anzukämpfen, nehmen wir sie so, wie sie sind.</p>\n<p>Durch Achtsamkeit geben Sie Ihrem intuitiven Wissen mehr Raum. Hören Sie mehr auf Ihre Gefühle oder mehr auf Ihre Vernunft? Achtsamkeitsübungen bieten einen Weg an, Gefühl und Verstand in ein Gleichgewicht zu bringen und damit zu einem intuitiven Wissen und Verstehen zu gelangen. Wenn Sie einen Zugang zu intuitivem Wissen und Verstehen finden, können Sie z. B. Entscheidungen leichter treffen. Intuitives Wissen und Verstehen enthält Elemente, die über das reine Nachdenken, aber auch über das reine Gefühl hinausgehen.</p>\n<p>Durch Achtsamkeit bekommen Sie einen besseren Bezug zu sich selbst. Achtsamkeitsskills helfen Ihnen, das Gefühl für sich selbst und das Gefühl für Ihre eigene Identität zu stärken. Situationen, in denen Sie sich innerlich leer fühlen, werden seltener.</p>\n<p>Was passiert, wenn wir mehrere Dinge gleichzeitig tun? Für dieses Nebeneinanderher bezahlen wir einen Preis. Wir schalten auf „Autopilot“ um. Wir verpassen den Moment. Das heißt, die Wahrnehmung für uns selbst, im Hier und Jetzt, wird flacher und kaum noch spürbar. Unsere Gedanken und Gefühle wandern oft in die Vergangenheit oder die Zukunft. „Wirkliches Leben“ erfahren wir aber nur im Hier und Jetzt.</p>\n<h3>Atemübungen (1)</h3><p>Den Atem zählen. Setzen Sie sich mit überkreuzten Beinen auf den Boden (im halben oder ganzen Lotus- sitz, falls Sie ihn beherrschen), oder setzen Sie sich auf einen Stuhl mit den Füßen auf dem Boden, oder knien Sie sich hin, oder legen Sie sich ausgestreckt auf den Boden, oder machen Sie einen Spaziergang. Schauen Sie, was für Sie möglich ist und was Ihnen gut tut. Wenn Sie einatmen, dann sind Sie sich bewusst: „Ich atme ein, eins.“ Wenn Sie ausatmen, sind Sie sich bewusst: „Ich atme aus, eins.“ Denken Sie daran, vom Bauch her zu atmen. Wenn Sie mit dem zweiten Einatmen beginnen, sind Sie sich bewusst: „Ich atme ein, zwei.“ Wenn Sie langsam ausatmen, sind Sie sich bewusst: „Ich atme aus, zwei.“ Fahren Sie so fort bis zehn. Wenn Sie bei zehn angekommen sind, dann kehren Sie zu eins zurück. Immer wenn Sie das Zählen vergessen haben, kehren Sie zu eins zurück. Tun Sie das fünf Minuten lang.</p>\n<p>Den Atem mit Fußschritten messen. Gehen Sie langsam im Garten umher oder auf einem Feldweg. Atmen Sie normal. Bestimmen Sie die Länge eines Atemzuges, die Dauer von Ein- und Ausatmen, durch die Anzahl Ihrer Schritte. Tun Sie das für einige Minuten. Fangen Sie damit an, das Aus- atmen um einen Schritt zu verlängern. Zwingen Sie sich nicht zu längerem Einatmen. Atmen Sie natürlich. Achten Sie beim Einatmen sorgfältig darauf, ob der Wunsch ent- steht, es zu verlängern. Tun Sie das während zehn Atemzügen. Verlängern Sie jetzt das Ausatmen um einen weiteren Schritt. Achten Sie darauf, ob sich das Einatmen um einen Schritt verlängert oder nicht. Verlängern Sie das Einatmen nur, wenn Sie das Gefühl haben, dass es Ihnen Freude bereitet. Kehren Sie nach zwanzig Atemzügen zum nor- malen Atmen zurück. Nach etwa fünf Minuten können Sie wieder mit der Übung der verlängerten Atemzüge beginnen. Wenn Sie die geringste Müdigkeit verspüren, kehren Sie zum normalen Atmen zurück. Nach mehreren Sitzungen solcher Übungen werden Ein- und Ausatmung gleich lang sein. Dehnen Sie das lange Atmen nicht über zehn oder zwanzig Atemzüge hinaus aus.</p>\n<p>Tiefes Atmen. Legen Sie sich auf den Rücken. Atmen Sie gleichmäßig und sanft, und richten Sie Ihre Aufmerksamkeit auf die Bewegung Ihres Bauches. Wenn Sie beginnen einzuatmen, lassen Sie die Bauchdecke sich heben, um so dem unteren Teil der Lungen Luft zu- zuführen. Wenn sich der obere Teil der Lungen mit Luft zu füllen beginnt, hebt sich Ihre Brust, und die Bauchdecke beginnt zu sinken. Strengen Sie sich dabei nicht an. Tun Sie das für zehn Atemzüge. Das Ausatmen wird länger dauern als das Einatmen.</p>\n<p>Dem Atem folgen. Setzen Sie sich mit überkreuzten Beinen auf den Boden (im halben oder ganzen Lotus- sitz, falls Sie ihn beherrschen), oder setzen Sie sich auf einen Stuhl mit den Füßen auf dem Boden, oder knien Sie sich hin, oder legen Sie sich ausgestreckt auf den Boden, oder machen Sie einen Spaziergang. Schauen Sie danach, was für Sie möglich ist und was Ihnen gut tut. Fangen Sie damit an, sanft und gleichmäßig (vom Bauch her) zu atmen, sind Sie sich bewusst: Ich atme jetzt normal ein. Atmen Sie aus und sind Sie sich bewusst: Ich atme normal aus. Tun Sie das für drei Atemzüge. Beim vierten Atemzug verlängern Sie dann das Einatmen, sind Sie sich bewusst: Ich atme langsam ein. Atmen Sie aus, und sind Sie sich bewusst: Ich atme langsam aus. Fahren Sie damit drei Atem- züge fort. Folgen Sie jetzt sorgfältig Ihrem Atem, und sind Sie sich jeder Bewegung Ihres Bauches und Ihrer Lungen bewusst. Folgen Sie dem Ein- und Ausatmen der Luft. Sind Sie sich bewusst: Ich atme ein und folge dem Einatmen vom Anfang bis zum Ende. Ich atme aus und folge dem Ausatmen vom Anfang bis zum Ende. Tun Sie das während zwanzig Atemzügen. Kehren Sie dann zum normalen Atmen zurück. Wiederholen Sie die Übung nach fünf Minuten. Denken sie daran, beim Atmen ein leichtes Lächeln zu zeigen.</p>\n<h3>Mental verbinden</h3>\n<p>Diesen Skill können Sie anwenden, wenn Sie sich einsam und verlassen fühlen. Üben Sie den Skill „Mental verbinden“ mit Ihrer Therapeutin mehrere Male und versuchen Sie dies dann mit vertrauten Personen: Stellen Sie sich vor, Sie könnten eine Verbindung zu einer anderen Person herstellen, indem Sie beispielsweise Energie oder Kraft ausstrahlen und empfangen. Setzen Sie sich auf einen Stuhl und stellen Sie sich vor, Sie leiten ein Kabel oder eine Lichtverbindung von Ihrem Köper über den Stuhl in den Boden und von dort zu dem Stuhl Ihrer Therapeutin, um so Kontakt mit ihr aufzunehmen. Denken Sie daran: Dies ist eine Übung, die Ihre Achtsamkeit auf die allen Menschen innewohnende Verbundenheit richtet. Trainieren Sie Ihren Geist, dies zu spüren, so gut es geht:</p>\n<p>mit der Therapeutin im gleichen Raum; mit der Therapeutin zu einem vereinbarten Zeitpunkt; mit einer vertrauten Person zu einem vereinbarten Zeitpunkt; mit einer vertrauten Person ohne zeitliche Vereinbarung.</p>\n<h3>Verbundenheit wahrnehmen</h3>\n<p>Auch dieser Skill hilft, wenn Sie sich verloren und einsam fühlen: Setzen Sie sich auf einen Stuhl und überlegen Sie, wer alles dazu beigetragen hat, dass Sie genau auf diesem Stuhl, in diesem Raum sitzen können. Versuchen Sie genau zu sein: Falls der Stuhl aus Holz ist – wer hat den Wald gerodet, den Baum gepflanzt, gefällt, das Holz entrindet und transportiert? Wer hat es gesägt, gehobelt, geleimt? Wer hat die Schrauben hergestellt und wer den Entwurf gezeichnet? Sie werden sehr schnell wahrnehmen wie viele Menschen daran gearbeitet haben, Ihnen zu ermöglichen, auf diesem Stuhl zu sitzen. Vielleicht ist eine kleine Geste der Dankbarkeit möglich? Wer mag, kann diese Übung auch mit einem Stück Brot durchführen, mit einer Bluse oder einfach einer Blume, die auf dem Tisch steht. Sie sehen – Sie sind nicht alleine.</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n"
    },
    "2eREkv": {
      "id": "2eREkv",
      "slug": "orientierung-auf-das-ziel",
      "category": "beziehungen",
      "title": "orientierung auf das ziel",
      "content": "<h4>Orientierung auf das Ziel</h4>\n<p>Beschreibe die Situation. Drücke Deine Gefühle, Empfindungen und Gedanken aus. Behaupte Dich, wenn Du um etwas bittest und sage Nein, wenn Du etwas nicht machen willst. Erkläre die Konsequenzen. Bestärke und Wertschätze Dein Gegenüber. Konzentriere Dich auf Deine Ziele und lass Dich nicht ablenken, sondern wiederhole höflich Deine Bitten und Wünsche. Ignoriere persönliche Angriffe. Trete wirkungsvoll und kompetent auf. Verhandele über alternative Lösungen, (nicht mit dem Kopf durch die Wand!).</p>\n<p>Um Ihre Ziele durchzusetzen! Um Beziehungen zu knüpfen und zu pflegen! Um in Begegnungen mit anderen Ihre Selbstachtung zu wahren! NEIN ist ein ganzer Satz. Ihr Verhalten in zwischenmenschlichen Situationen kann in drei Absichten gegliedert werden: Orientierung auf das Ziel. Orientierung auf die Beziehung. Orientierung auf die Selbstachtung. Sie müssen in jeder zwischenmenschlichen Situation entscheiden, welche Absicht Ihnen am wichtigsten ist, und Sie müssen Prioritäten setzen: Wie wichtig ist es Ihnen, Ihr Ziel zu erreichen? Wie wichtig ist Ihnen die Beziehung zu Ihrem Gegenüber? (Was soll die andere Person nach dieser Begegnung Ihnen gegenüber empfinden?) Wie wichtig ist Ihnen Ihre Selbstachtung? (Wie möchten Sie sich während und nach dieser Begegnung fühlen?)</p>\n<p>Zielorientiertes Handeln konzentriert sich darauf, in einer bestimmten Situation ein bestimmtes Ziel zu erreichen, z. B. selbst Bitten und Forderungen zu stellen. Schauen Sie die sechs B’s an! Beschreiben = Die momentane Situation so konkret wie möglich zu beschreiben, ist eine wichtige Methode, um Missverständnisse zu vermeiden. Bitten = Es ist wichtig, dass Sie Ihre Wünsche und Bitten klar zum Ausdruck bringen, auch Ablehnungen sollten klar formuliert werden. Belohnen = Schon während Sie Ihren Wunsch formulieren, ist es sinnvoll, die Reaktionen des anderen genau zu beobachten, um positive Reaktionen rasch zu „verstärken“, also zu belohnen.</p>\n<p>Drei „Wie“-B’s Beharren = Beharren Sie auf Ihrem Wunsch, oder Ihrer Absage! Wenn Sie angegriffen werden, ignorieren Sie die Bedrohung, oder die Versuche, sich abzulenken. Bleiben Sie bei Ihrem Standpunkt. Beeindrucken = Es ist auch sehr wichtig, Selbstsicherheit zu zeigen. Sie haben bessere Möglichkeiten, sich durchzusetzen, wenn Sie sich überzeugend und kompetent zeigen, z. B. wenn Sie eine ruhige und deutliche Stimme, eine aufrechte Körperhaltung und eine lockere Gestik haben. Bieten = Nicht immer können wir unsere Ziele uneingeschränkt erreichen. Jemand, der weiß was er will, kennt dieses Risiko und kann die Situation gut einschätzen. Wenn man bereit ist zu verhandeln, kann ein ähnliches Ziel erreicht werden.</p>\n"
    },
    "2rF4Hq": {
      "id": "2rF4Hq",
      "slug": "orientierung-auf-die-beziehung",
      "category": "beziehungen",
      "title": "orientierung auf die beziehung",
      "content": "<h3>Orientierung auf die Beziehung</h3>\n<p>Verwende höfliche Umgangsformen, verzichte auf Angriffe und Drohungen. Zeige echtes Interesse an der anderen Person und deren Meinung. Validiere die andere Person, ohne Sie zu bewerten. Gelassenheit und Humor sind hilfreich.<p>Orientierung auf die Beziehung bedeutet, dass die Aufrechterhaltung oder die Ver- besserung der Beziehung im Zentrum steht, obwohl Sie versuchen, das zu erreichen, was Sie möchten, oder eine Bitte ablehnen. Im optimalen Fall bekommen Sie, was Sie möchten, und die Person mag oder respektiert Sie sogar mehr als vorher.</p>\n<p>Um beziehungsorientiert zu handeln, helfen die LIVE-Fertigkeiten:</p>\n<p>Lächeln= Seien Sie freundlich und liebenswürdig bei Begegnungen. Formulieren Sie auch Ihren Ärger höflich und vermeiden Sie verbale oder gar körperliche Angriffe. Interesse zeigen = Zeigen Sie Interesse an der anderen Person. Hören Sie ihr zu, unterbrechen Sie sie nicht, fallen Sie ihr nicht ins Wort. Validieren = Zeigen Sie dem anderen, dass Sie seine subjektive Sichtweise verstehen. Das heißt nicht, dass Sie dies für einzig richtig, wahr und gut heißen. Es heißt lediglich, dass Sie die Meinung des anderen als dessen subjektive Sichtweise anerkennen. Easy nehmen = Versuchen Sie, leicht zu sein. Lächeln Sie, seien Sie humorvoll, schmeicheln Sie, wenn es nötig ist, und besänftigen Sie. Gute Verhandler schaffen eine „samtene“ Atmosphäre.</p>\n"
    },
    "ZXcqct": {
      "id": "ZXcqct",
      "slug": "orientierung-auf-die-selbstachtung",
      "category": "beziehungen",
      "title": "orientierung auf die selbstachtung",
      "content": "<h3>Orientierung auf die Selbstachtung</h3>\n<p>Sei fair mit Dir selbst und mit anderen. Entschuldige Dich nicht dafür dass Du existierst. Aber achte darauf ob es möglicherweise wirklich etwas gibt, wofür Du Dich entschuldigen solltest. Stehe für Deine Werte ein und halte Dich an die Regeln. Sei aufrichtig und ehrlich.</p>\n<p>Orientierung auf die Selbstachtung bedeutet, Ihre Selbstachtung zu stabilisieren und zu stärken. Wenn Sie versuchen, Ziele zu erreichen, und es gleichzeitig schaffen, Ihre eigenen Werte und Überzeugungen zu respektieren und ein positives Gefühl zu sich selbst zu entwickeln, dann ist Ihr Verhalten in dieser Hinsicht wirksam.</p>\n<p>Um sich wirksam in der Dimension der Selbstachtung zu verhalten, sind die FAIR-Skills hilfreich: Fairness = Seien Sie so fair zu sich selbst wie zu anderen Menschen. Recht- fertigen Sie sich nicht dauernd. Entschuldigen Sie sich nicht dafür, dass Sie leben. Rechtfertigen Sie sich nicht dafür, dass Sie um etwas bitten oder dass Sie eine eigene Meinung haben. Akzeptanz = Sowohl Sie selbst als auch Ihr Gegenüber müssen lernen, Ihre Entscheidungen zu akzeptieren. Innere Werte = Gehen Sie nicht so weit, Ihre Wertvorstellungen zu opfern, um ein Ziel zu erreichen oder die Beziehung zu retten! Realität = Bleiben Sie bei der Realität. Vermeiden Sie zu lügen (das klappt nicht immer), vermeiden Sie, sich hilflos zu geben, wenn Sie es nicht sind, und vermeiden Sie zu übertreiben.</p>\n"
    },
    "ZXTLWo": {
      "id": "ZXTLWo",
      "slug": "orientierung-festlegen",
      "category": "beziehungen",
      "title": "orientierung festlegen",
      "content": "<h3>Orientierung festlegen</h3>\n<p>In jeder zwischenmenschlichen Situation, in der Sie etwas erreichen wollen, kommen drei verschiedene Bedürfnisse zum Tragen: der Wunsch, ein Ziel zu erreichen, der Wunsch, eine gute Beziehung zum Gegenüber zu haben, der Wunsch, sich selber dabei wohl zu fühlen.<p>Gehen Sie davon aus, dass es leider kaum Situationen gibt, in welchen Sie alle drei Bedürfnisse vollständig befriedigen können. Sonst müssten Sie ja nicht verhandeln oder um etwas kämpfen. Sie müssen festlegen, welches Bedürfnis Ihnen in der jeweiligen Situation am wichtigsten ist. Das heißt, Sie müssen Prioritäten setzen. Das fällt natürlich schwer, denn am liebsten möchte man, gerade in wichtigen zwischenmenschlichen Situationen, alle Bedürfnisse befriedigen und keine Abstriche machen. Dennoch ist es hilfreich, die Realität zu akzeptieren.</p>\n<p>Dieses Arbeitsblatt kann Ihnen helfen, komplizierte Situationen besser zu planen: Legen Sie für jedes Bedürfnis dessen Bedeutung in Punkten fest (0–100 Punkte). Aller- dings stehen Ihnen für alle drei Bedürfnisse nur insgesamt 100 Punkte zur Verfügung. Sie müssen also Abstriche machen und Kompromisse eingehen. Das ist ärgerlich, aber auf die lange Sicht erfolgreicher, als trotzig mit dem Kopf durch die Wand zu gehen.</p>\n<p>Beschreiben Sie die Situation:</p>\n<p>_____________________________</p>\n<p>_____________________________</p>\n<p>Was ist Ihr Ziel? Welche Ergebnisse oder Veränderungen erhoffen Sie sich von dem Gespräch?</p>\n<p>_____________________________</p>\n<p>_____________________________</p>\n<p>Bedeutung in Punkten: (0–100) _______________</p>\n<p>Wie wichtig ist Ihnen die Beziehung? Wie soll die andere Person Ihnen gegenüber empfinden, wenn die Begegnung vorüber ist?</p>\n<p>_____________________________</p>\n<p>_____________________________</p>\n<p>Bedeutung in Punkten: (0–100) _______________</p>\n<p>Wie wichtig ist Ihnen Ihre Selbstachtung? Wie möchten Sie sich fühlen, wenn die Begegnung mit dem Menschen vorüber ist?</p>\n<p>_____________________________</p>\n<p>_____________________________</p>\n<p>Bedeutung in Punkten: (0–100) _______________</p>\n<p>Einstufung der Gesamtsituation: Teilen Sie einen Kreis in drei Segmente und passen sie deren Größe an die Wichtigkeit an:</p>\n<p>Welche Konsequenzen ziehen Sie aus diesem Diagramm?</p>\n<p>_____________________________</p>\n<p>_____________________________</p>\n"
    },
    "Z1eEvQQ": {
      "id": "Z1eEvQQ",
      "slug": "zwischenmenschliche-fertigkeiten-üben",
      "category": "beziehungen",
      "title": "zwischenmenschliche fertigkeiten üben",
      "content": "<h3>Zwischenmenschliche Fertigkeiten üben</h3>\n<p>Übungssituation (wählen Sie aus der Liste aus)</p>\n<p>_____________________________</p>\n<p>Welchen Bereich wollen Sie üben? Zielorientiertes Verhalten (6 B’s). Beziehungsorientiertes Verhalten (LIVE). Orientierung auf die Selbstachtung (FAIR)</p>\n<p>Wann planen Sie, die Übung durchzuführen?</p>\n<p>_____________________________</p>\n<p>Was genau wollen Sie üben?</p>\n<p>_____________________________</p>\n<p>Arbeitsblatt: Zwischenmenschliche Fertigkeiten 7 B</p>\n<p>Gehen Sie in eine Bibliothek, bitten Sie den Bibliothekar, Ihnen bei der Suche nach einem Buch behilflich zu sein (Abwandlung: Bitten Sie einen Verkäufer, Ihnen behilflich zu sein). Laden Sie einen Freund zum Essen ein (nach Hause oder in ein Restaurant). Rufen Sie eine Versicherungsgesellschaft an und fragen Sie nach der Höhe der Beiträge. Bringen Sie gebrauchte Bücher in ein Antiquariat, fragen Sie nach ihrem Wert. Gehen Sie, wenn Sie die Auskunft bekommen haben. Bezahlen Sie mit einem 50-Euro-Schein für eine Zeitung, ein Päckchen Kaugummi oder irgendetwas anderes, das weniger als 5 Euro kostet. Gehen Sie in einen Laden, lassen Sie einen 50-Euro-Schein wechseln, ohne etwas zu kaufen. Gehen Sie in ein Restaurant, bitten Sie um ein Glas Wasser, trinken Sie es, bedanken Sie sich und gehen. Gehen Sie in ein Restaurant, bitten Sie darum, die Toilette benutzen zu dürfen, gehen Sie, ohne etwas zu essen. Gehen Sie in das teuerste Bekleidungsgeschäft, probieren Sie fünf teure Kleidungsstücke an, kaufen Sie keines davon (Abwandlung: Bitten Sie den Verkäufer, Ihnen fünf verschiedene Dinge zu zeigen, die nicht ausgestellt sind). Bitten Sie jemanden, Ihnen Geld zu wechseln, während Sie auf die Straßenbahn/den Bus warten. Lassen Sie sich einen Termin zum Haareschneiden geben, rufen Sie später noch einmal an und sagen Sie den Termin ab (Abwandlung: sich einen Tisch reservieren lassen und wieder absagen). Bestellen Sie im Restaurant ein Essen, bitten Sie um eine andere Beilage als die ange- gebene. Bitten Sie die Leiterin eines Geschäftes, Ihnen etwas zu bestellen, was nicht vorrätig ist. Fragen Sie einen Verkäufer in einem Lebensmittelgeschäft, ob sich im Lager z. B. noch frischer Salat befindet (Abwandlung: Wenn Sie etwas im Regal nicht finden, fragen Sie einen Verkäufer, ob es sich noch im Lager befindet). Gehen Sie in ein Delikatessengeschäft, verlangen Sie 50 Gramm Käse. Gehen Sie, ohne etwas anderes zu kaufen. Gehen Sie in einen Laden für Geschenkartikel, bitten Sie die Verkäuferin, Ihnen bei der Auswahl eines Geschenkes zu helfen (Abwandlung: Fragen Sie die Verkäuferin nach Ihrer Meinung über das, was Sie zu kaufen beabsichtigen). Melden Sie sich telefonisch auf Stellenanzeigen, informieren Sie sich über die angebotenen Stellen. Lehnen Sie die Meinung eines anderen Menschen ab. Vertreten Sie eine andere Meinung zu einem Thema (z. B. eine Fernsehsendung, ein Buch, einen politischen Standpunkt) als z. B. Ihre Eltern oder ein enger Freund. Äußern Sie eine andere Ansicht als Ihre Eltern, Ihre Ehefrau, Ihr Partner oder eine enge Freundin über die Art des Umgangs miteinander. Bitten Sie Ihre Eltern, Ihren Partner oder Ihre Kinder, mehr Verantwortung in einem Bereich zu übernehmen. Bestellen Sie in einer Bar ein nicht-alkoholisches Getränk. Sagen Sie, dass Sie nicht zu einer Veranstaltung gehen können oder früher gehen müssen. Gehen Sie in ein Restaurant und bitten Sie den Kellner um Auskunft über ein teures Essen oder einen teuren Wein. Bestellen Sie anschließend etwas Billiges. Gehen Sie zu einer Warteschlange an einem Bahnkartenschalter und bitten Sie eine Person, Sie vorzulassen. Sagen Sie, dass Ihr Zug gleich abfährt. Gehen Sie in eine Veranstaltung und kommen Sie dabei 10 Minuten zu spät. Lassen Sie sich in einem Juweliergeschäft teuren Schmuck zeigen. Gehen Sie in ein Lebensmittelgeschäft, nehmen Sie etwas (z. B. Schokolade oder Eis) aus dem Regal und essen Sie es auf. Wenn jemand Sie deswegen anspricht, weisen Sie auf die Verpackung und sagen Sie, dass Sie es gleich an der Kasse zahlen werden. Gehen Sie in eine vollbesetzte Straßenbahn, bitten Sie jemanden, seinen Platz für Sie frei zu machen. Sagen Sie, dass Sie sich nicht wohl fühlen oder dass Sie krank sind.</p>\n<p>Nein sagen</p>\n<p>Wollen Sie eine Bitte ablehnen? Welche Faktoren müssen Sie bei der Entscheidung darüber, ob und mit welcher Intensität Sie Nein sagen wollen, berücksichtigen?</p>\n<p>Den richtigen Zeitpunkt: Ist jetzt ein günstiger Zeitpunkt, um nein zu sagen? Sollte ich die Antwort eine Weile aufschieben? Die richtige Vorbereitung: Ist mir die Bitte der anderen Person klar? Weiß ich genau, was ich ablehnen werde? Gegenseitige Rechte: Hat die Person Macht über mich (z. B. meine Vorgesetzte, mein Lehrer)? Liegt das, um das sie mich bittet, innerhalb ihrer Befugnis? Bin ich verpflichtet, der Person zu geben, was sie möchte? Würde ein Nein die Rechte der Person verletzen? Die Beziehung zur anderen Person: Ist das, worum die andere Person mich bittet, der Beziehung angemessen? Gegenseitigkeit: Bin ich der Person einen Gefallen schuldig? Tut sie viel für mich? Auswirkungen: Ist die momentane Ablehnung wichtiger als das langfristige Wohl der Beziehung? Werde ich es eventuell bedauern oder ärgerlich darüber sein, nein gesagt zu haben? Wird Zurückhaltung zum jetzigen Zeitpunkt die Situation entspannen, aber auf die Dauer zu Problemen führen?</p>\n<p>Um etwas bitten</p>\n<p>Wollen Sie um etwas bitten? Welche Faktoren müssen Sie bei der Entscheidung darüber, ob und mit welcher Intensität Sie um etwas bitten wollen, berücksichtigen?</p>\n<p>Den richtigen Zeitpunkt: Ist jetzt der richtige Zeitpunkt zum Fragen? Ist die Person in der richtigen Stimmung, um sich mir aufmerksam zuzuwenden? Die richtige Vorbereitung: Habe ich meine „Hausaufgaben“ erledigt, d. h. weiß ich alles Notwendige, um meine Bitten zu unterstützen? Bin ich mir klar darüber, was ich genau will? Gegenseitige Rechte: Bin ich befugt, der Person zu sagen, was sie zu tun hat? Ist die Person gesetzlich oder moralisch verpflichtet, mir zu geben, was ich möchte? Die Beziehung zur anderen Person: Ist das, was ich möchte, der Beziehung angemessen? Gegenseitigkeit: Gebe ich der Person ebenso viel wie ich es mir von ihr wünsche? Bin ich bereit, auch etwas zu geben, falls sie ja sagt? Auswirkungen: Wird Zurückhaltung zum jetzigen Zeitpunkt die Situation entspannen, aber auf die Dauer zu Problemen führen?</p>\n<p>Nachdrücklichkeit beim Nein-Sagen</p>\n<p>_____________________________</p>\n<p>Mit den folgenden Fragen sollten Sie anfangen. Wenn Sie hier eine Frage mit Nein beantworten würden, können Sie die restlichen Fragen weglassen.</p>\n<p>Wie sagen Sie Nein?</p>\n<p>Hindernisse beseitigen</p>\n<p>Was hält Sie in zwischenmenschlichen Situationen davon ab, sich so zu verhalten, wie Sie möchten?</p>\n<p>Mangel an Fertigkeiten. Sie wissen im Moment nicht, was zu sagen ist. Sie wissen nicht, wie Sie sich verhalten sollen. Sie wissen nicht, was wirksam ist.</p>\n<p>Störende Gedanken. Sie machen sich Sorgen wegen negativer Konsequenzen, z. B.: „Sie werden mich nicht mögen“, „Sie wird denken, dass ich dumm bin“. Sie machen sich Sorgen darüber, ob Ihnen auch zusteht, was Sie möchten z. B.: „Ich bin ein so schlechter Mensch, dass ich das nicht verdiene“. Sie machen sich Sorgen, nicht effektiv zu sein, Sie klagen sich selbst an z. B.: „Ich werde es nicht richtig machen“, „Ich werde mich lächerlich machen“.</p>\n<p>Beeinträchtigende Gefühle. Sie haben die Kompetenz, aber Ihre Gefühle hindern Sie daran, das zu tun oder zu sagen, was Sie möchten.</p>\n<p>Unentschlossenheit. Sie können sich nicht entscheiden, was zu tun ist oder was Sie wirklich wollen. Sie haben die Fähigkeit, aber Ihre Unentschlossenheit hindert Sie daran, das zu tun oder das zu sagen, was Sie möchten. Sie sind sich unsicher über die richtige Balance, entweder zu viel zu fragen oder gar nicht zu fragen; entweder zu allem nein zu sagen oder allem zuzustimmen.</p>\n<p>Umfeld. Manche Umstände machen es sogar für eine sehr kompetente Person unmöglich, effektiv zu sein.</p>\n<p>Hindernisse beseitigen</p>\n<p>Überlegen Sie ein wichtiges Ziel, das Sie gerade nicht umsetzen können, z. B. einen Job suchen, eine neue Wohnung finden oder den Schulabschluss machen.</p>\n<p>Formulieren Sie Ihr Ziel:</p>\n<p>Überlegen Sie nun bei jedem einzelnen Problemfeld, was Sie genau daran hindert, das Ziel zu erreichen: Mangel an Fertigkeiten. Störende Gedanken. Einstellungen und Mythen. Störende Gefühle. Unentschlossenheit. Ein ungünstiges Umfeld. Können Sie etwas unternehmen, um eines der Hindernisse aus dem Weg zu räumen? Welches Hindernis?</p>\n<p>_____________________________</p>\n<p>Was können Sie unternehmen?</p>\n<p>_____________________________</p>\n"
    },
    "1KaHiT": {
      "id": "1KaHiT",
      "slug": "validierung",
      "category": "beziehungen",
      "title": "validierung",
      "content": "<h3>Validierung</h3>\n<p>Das Wort „Validierung“ bedeutet, dem Gegenüber zu vermitteln, dass Sie dessen subjektive Sichtweise der Dinge nachvollziehen und verstehen können.</p>\n<p>Validierung bedeutet NICHT, etwas unbedingt gutzuheißen oder die Meinung des anderen zu teilen: „Ich kann nachvollziehen, dass Sie Angst vor Nähe und Vertrautheit haben“, bedeutet noch nicht, dass dies eine sinnvolle Einstellung ist oder gar die einzig mögliche.</p>\n<p>Auswirkungen der Validierung: Aufbau von Vertrauen. Stärkung der Selbstachtung. Unterstützung der Beziehungen in schwierigen Situationen</p>\n<p>Selbst-Validierung</p>\n<p>Bedeutet: Sich selbst wertzuschätzen. Sich selbst ernst zu nehmen, nicht wertend zu sein, ermutigend und unterstützend zu sein, die eigene Verletzlichkeit zu akzeptieren und entsprechend für sich zu sorgen.</p>\n<p>Sei interessiert an Dir selbst! Entdecke, wie Dein Körper sich anfühlt und was Du jetzt gerade denkst und fühlst. Akzeptiere ohne Einschränkungen, was Du gerade fühlst und denkst. Verhalte Dich gegenüber Dir selbst, Deinen Gedanken und Gefühlen so, als ob Du selbst ein guter Freund oder eine gute Freundin von Dir wärst. Bestätige und unterstütze Dich im Umgang mit Deinen Gefühlen - es sind Deine Gefühle und Du darfst sie haben. Konzentriere Dich nicht auf 'Du hättest sollen' und 'Du müsstest aber'. Verändere Deine Gefühle und Ansichten nicht (minimieren, herabsetzen, schmälern, verniedlichen, verneinen, ignorieren, verändern), wenn andere etwas anderes fühlen oder meinen als Du. Konzentriere Dich auf etwas, wo Du Dich häufig selbst abwertest (Aussehen, Verhalten, Gefühle, Gedanken, Arbeit, Leistung, Sozialverhalten, etc.) und versuche eine andere Sichtweise dessen zu finden, was Du bisher abgewertet hast.</p>\n<p>Traue Dich, an Bestätigungen und Feedback zu glauben! Erlaube Dir, Dich über Deine Fortschritte, Deine erreichten Ziele und Anerkennung anderer Menschen zu freuen! Mache Dinge, die für Dich funktionieren und die Dir zeigen, dass Du Dich selbst und Deine Bedürfnisse ernst nimmst. Verwandele eine Invalidierung in eine Validierung. Es kann sich um etwas handeln, das Du selbst über Dich denkst, oder um etwas, das jemand anders über Dich gesagt hat. Versuche Dich selbst und Deine Handlungen samt ihrer Folgen zu verstehen. Mache Dir Deine Lebensgeschichte und Erfahrungen, die aktuellen Umstände und Deine Bedürfnisse und Wünsche bewusst. Validiere Dich selbst, indem Du für Dich sorgst und Dinge machst, die Du magst.</p>\n<p>Validiere Deine Gedanken, Gefühle und Reaktionen. Gestatte Dir, etwas zu wollen oder Dir etwas zu wünschen. Validiere Deine Ansichten und Werte. Validiere, dass es Dinge gibt, die für Dich schwierig sind. Validiere, dass Du Dir Ziele gesetzt hast und Dich anstrengst, um Deine Ziele zu erreichen. Validiere, was Du für andere tust.</p>\n<p>Andere Validieren</p>\n<p>Bedeutet: Die anderen wertzuschätzen und ernst zu nehmen, anderen Hilfe und Unterstützung anzubieten, zwischenmenschliche Beziehungen in ein Gleichgewicht mit den eigenen Bedürfnissen und den Bedürfnissen der anderen zu bringen.</p>\n<p>Sei ganz im Augenblick und höre achtsam zu. Spiegel die Gefühle anderer Menschen auf eine respektvolle Art. Bewerte sie nicht. Spiegle, was Du hörst, um zu zeigen, dass Du verstehst. Versuche die Reaktionen anderer Menschen vor dem Hintergrund ihrer Erfahrungen und Lebensgeschichten zu verstehen. Überprüfe Deine Gefühle, Beurteilungen und Wünsche, ob sie in der aktuellen Situation passend sind und zur aktuellen Situation gehören. Wenn nicht, schwäche Deine Gefühle, Beurteilungen und Wünsche ab. Versuche authentisch zu sein, behandele andere Menschen gleichwertig und nicht als ob sie schwach oder inkompetent wären. Jemandem seine Verletzlichkeit anzuvertrauen ist eine Form der Validierung.</p>\n<p>Validierung Erhalten</p>\n<p>Wie kannst Du dafür sorgen, validiert (wertgeschätzt) zu werden?</p>\n<p>Du wirst häufiger validiert, wenn Du andere Menschen validierst. Was könnte jemand anders in der aktuellen Situation tun, um Dich zu validieren?</p>\n"
    },
    "1KaHiq": {
      "id": "1KaHiq",
      "slug": "emotionale-verwundbarkeit-reduzieren",
      "category": "emotionsregulation",
      "title": "emotionale verwundbarkeit reduzieren",
      "content": "<h3>Emotionale Verwundbarkeit Reduzieren</h3>\n<p>Bedeutet: Deine Erkrankungen zu behandeln, regelmässig und ausgewogen zu essen, auf Alkohol und Drogen zu verzichten, ausreichend zu schlafen, Dich zu bewegen.</p>\n<p>Störungen der Emotionsregulation (d. h. die Schwierigkeit, Emotionen zu steuern) stehen im Zentrum der Borderline-Störung. Heftige, oft lang andauernde, unangenehme Gefühle bestimmen das Erleben, das Gefühl für sich selbst und die Handlungen der Borderline-Patientinnen. Die meisten anderen Probleme hängen damit zusammen. Auch positive Gefühlsempfindungen können sehr stark werden. Emotionen können wir regulieren und entsprechende Handlungen steuern. Je stärker die Emotion, desto schwieriger ist es jedoch, den Handlungsimpuls zu kontrollieren. Wie das funktioniert, lernen Sie in diesem Modul.</p>\n<p>Was lernen wir? Gefühle zu beobachten, zu beschreiben und in ihren Bedeutungen und Auswirkungen zu verstehen. Emotionale Verwundbarkeit zu verringern und positiven Gefühlen mehr Raum zu geben. Emotionales Leiden zu vermindern. Die Skills nennen wir: Gefühle abschwächen. Vorsicht Falle. Fakten überprüfen. Emotionssurfing. ABC GESUND. Glaubenssätze relativieren. Probleme lösen: STOP – DENK</p>\n<p>Was wissen wir über Emotionen? Was sind Emotionen?</p>\n<p>Emotionen sind automatisierte und erlernte Antworten auf innere und äußere Reize oder Informationen. Emotionen drängen zu bestimmten Handlungen. Wir unterscheiden Emotionen (kurz und rasch wechselnd) und Stimmungen (länger und stabiler) – wie Wetter und Klima.</p>\n<p>Wie wirken Emotionen? Emotionen sind verantwortlich für unser Wohlbefinden und auch dafür, wie wir uns anderen gegenüber verhalten – also für unser Sozialverhalten. Es ist hilfreich, sich klar zu machen, wie sie funktionieren:</p>\n<p>Emotionen entstehen meist rasch und vergehen auch wieder rasch. Emotionen führen dazu, dass wir uns lebendig fühlen. Starke Emotionen führen zu starker körperlicher Erregung. Starke Emotionen entwickeln starken Handlungsdruck und sind schwer zu hinterfragen. Das heißt, intensive Emotionen drängen sich in unser Erleben und bestimmen es. (Emotionen „machen sich wichtig“ und „lieben sich selbst“.) Emotionen steuern unser Verhalten. Das geschieht häufig nicht bewusst. Aber wir versuchen, unangenehme Emotionen zu meiden und angenehme Emotionen zu erlangen. Emotionen motivieren uns also und bereiten unsere Handlungen vor. Emotionen sind stark von unserer Lebenserfahrung geprägt. Ein Schüler, der bereits mehrmals wegen seiner etwas plumpen Bewegungen im Sportunterricht ausgelacht und gehänselt wurde, wird sich bei einer abfälligen Bemerkung auf dem Schulhof über seine neuen Sneakers eher schämen als jemand, der regelmäßig die Fußballmannschaft zum Sieg führt und deshalb von allen bewundert wird. Emotionen sagen nichts über die Wirklichkeit aus, sondern nur darüber, wie wir die Wirklichkeit deuten und bewerten. Wenn wir die SMS „Vielen Dank, du warst toll gestern ;-)“, auf dem Handy unseres Freundes lesen und das als geheimen Dank für einen Seitensprung interpretieren, werden wir natürlich eifersüchtig. Wenn wir aber wissen, dass sich mit dieser Mail ein Mitschüler bedankt, weil er von ihm den entscheidenden Tipp zur Lösung der Mathearbeit bekommen hat, sind wir wahrscheinlich stolz auf ihn. Unsere Emotionen beeinflussen auch andere Menschen. Unser Gesichtsausdruck, unsere Haltung und Gestik können Information schneller kommunizieren als Worte. Wenn jemand Tränen in den Augen hat und nach unten schaut, denken wir wahrscheinlich, dass er traurig ist, und wollen ihn trösten. Emotionen können uns selbst wichtige Informationen über die Situation geben. Wenn wir beispielsweise Angst haben, denken wir, dass die momentane Situation gefährlich ist, und werden uns sehr vorsichtig bewegen. Wenn wir uns schämen, dann filtern wir unsere Umgebung sehr genau nach Hinweisen auf soziale Zurückweisung und bemühen uns, nicht aufzufallen. Wenn wir eifersüchtig sind, werden wir automatisch alle Hinweise auf verdächtige E-Mails sehr genau registrieren, und wenn wir frisch verliebt sind, werden wir jeden noch so versteckten Hauch von Eleganz und Schönheit bei unserem Prinzen in leuchtenden Farben sehen. Wir können Emotionen auch steuern. Unser Gehirn kann Emotionen verstärken und abschwächen. Dies kann man trainieren.</p>\n<p>Allgemeine Emotions-Modell</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n"
    },
    "2Abcp8": {
      "id": "2Abcp8",
      "slug": "emotionale-verwundbarkeit-reduzieren",
      "category": "emotionsregulation",
      "title": "emotionale verwundbarkeit reduzieren",
      "content": "<h3>Emotionale Verwundbarkeit Reduzieren</h3>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n"
    },
    "Prx63E": {
      "id": "Prx63E",
      "slug": "emotionale-verwundbarkeit-reduzieren",
      "category": "emotionsregulation",
      "title": "emotionale verwundbarkeit reduzieren",
      "content": "<h3>Emotionale Verwundbarkeit Reduzieren</h3>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n"
    },
    "2BaHiq": {
      "id": "2BaHiq",
      "slug": "emotionale-verwundbarkeit-reduzieren",
      "category": "emotionsregulation",
      "title": "emotionale verwundbarkeit reduzieren",
      "content": "<h3>Emotionale Verwundbarkeit Reduzieren</h3>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n"
    },
    "ACbcp8": {
      "id": "ACbcp8",
      "slug": "emotionale-verwundbarkeit-reduzieren",
      "category": "emotionsregulation",
      "title": "emotionale verwundbarkeit reduzieren",
      "content": "<h3>Emotionale Verwundbarkeit Reduzieren</h3>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n"
    },
    "vRu63E": {
      "id": "vRu63E",
      "slug": "emotionale-verwundbarkeit-reduzieren",
      "category": "emotionsregulation",
      "title": "emotionale verwundbarkeit reduzieren",
      "content": "<h3>Emotionale Verwundbarkeit Reduzieren</h3>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n"
    },
    "T6wERg": {
      "id": "T6wERg",
      "slug": "emotionale-verwundbarkeit-reduzieren",
      "category": "emotionsregulation",
      "title": "emotionale verwundbarkeit reduzieren",
      "content": "<h3>Emotionale Verwundbarkeit Reduzieren</h3>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n"
    },
    "IThqo9": {
      "id": "IThqo9",
      "slug": "emotionale-verwundbarkeit-reduzieren",
      "category": "emotionsregulation",
      "title": "emotionale verwundbarkeit reduzieren",
      "content": "<h3>Emotionale Verwundbarkeit Reduzieren</h3>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n"
    },
    "LoQaT4": {
      "id": "LoQaT4",
      "slug": "emotionale-verwundbarkeit-reduzieren",
      "category": "emotionsregulation",
      "title": "emotionale verwundbarkeit reduzieren",
      "content": "<h3>Emotionale Verwundbarkeit Reduzieren</h3>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n"
    },
    "2oN0jv": {
      "id": "2oN0jv",
      "slug": "dont-reimport-httpclientmodule",
      "category": "http",
      "title": "don't re-import HttpClientModule",
      "content": "<h3>Problem</h3>\n<p><code>HttpClientModule</code> is responsible for providing us with HTTP related functionality. One such functionality is the ability to specify interceptors that inspect and transform HTTP requests from your application to the server.\nWhen re-importing <code>HttpClientModule</code> in a lazy-loaded module or a dependency of a lazy-loaded module, existing HTTP interceptors will be overridden for that module.</p>\n<h3>Solution</h3>\n<p>Import <code>HttpClientModule</code> only once in the root module.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://github.com/angular/angular/issues/20575\">HTTP_INTERCEPTORS are reset when re-importing HttpClientModule</a></li>\n</ul>\n"
    },
    "Z2exNXo": {
      "id": "Z2exNXo",
      "slug": "action-hygiene",
      "category": "ngrx",
      "title": "capture events with actions, not commands",
      "content": "<h3>Problem</h3>\n<p>When using NgRx, we are constantly dispatching actions to the store. These can be dispatched from different places such as components and effects. It can become really hard to figure out where all these actions originated from, why they were sent and how they are impacting the state.</p>\n<h3>Solution</h3>\n<p>By changing the way we name our actions, we can more easily see where actions are being dispatched from. It allows us, by just looking at the action history, what the user was doing and the order he was doing it in. So instead of having something like this as action log:</p>\n<ul>\n<li>[Users] Add User</li>\n<li>[Users] Remove User</li>\n<li>[Users] Update User</li>\n</ul>\n<p>We can have something like:</p>\n<ul>\n<li>[Users Overview Page] Add User</li>\n<li>[Users Overview Page] Remove User</li>\n<li>[Users Detail Page] Update User</li>\n</ul>\n<p>This also implies that actions should not be reused. This might seem like an overkill to create a second action that will have the same result. But we have to keep in mind that at some point in time, we might need to update this code later on. This explicitness will help us in the future.</p>\n<p>This is considered good <em>action hygiene</em>. The format for action names should be <code>[${source}] ${event}</code>.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=JmnsEvoy-gY\">Good action hygiene</a> by Mike Ryan</li>\n</ul>\n"
    },
    "iglD3": {
      "id": "iglD3",
      "slug": "actions-are-defined-as-classes",
      "category": "ngrx",
      "title": "define actions as classes",
      "content": "<h3>Problem</h3>\n<p>When we send an action to the store, we need to send an object that has a type property and optional metadata (often added as a payload property). We could recreate an object every time we want to send that but we would violate the DRY principle.</p>\n<p>One of the promises in NgRx is that it provides extreme type safety. This is something that cannot be achieved with plain objects.</p>\n<h3>Solution</h3>\n<p>We want to define our actions as classes. When we use classes to define our actions, we can define them once in a separate file and reuse them everywhere.</p>\n<p>Here’s an example on how to define an action.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { Action } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@ngrx/store'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">enum</span> AppActionTypes {\n  APP_PAGE_LOAD_USERS = <span class=\"hljs-string\">'[App Page] Load Users'</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppPageLoadUsers <span class=\"hljs-keyword\">implements</span> Action {\n  readonly <span class=\"hljs-keyword\">type</span> = AppActionTypes.APP_PAGE_LOAD_USERS;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> AppActions = AppPageLoadUsers;\n</code></pre>\n<p>Now, we can use the <code>AppPageLoadUsers</code> class to send this action to the store which is then passed to our reducers.</p>\n<p><strong>Note:</strong> Because of the way the action is being defined, using features like string literals and union types, we can leverage discriminated unions in our reducers to have extreme type safety when it comes to typing the action’s payload. See the additional resources for more info.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://blog.strongbrew.io/type-safe-actions-in-reducers/\">Type safe actions in reducers</a> by Kwinten Pisman</li>\n</ul>\n"
    },
    "ZPhLz2": {
      "id": "ZPhLz2",
      "slug": "do-not-put-everything-in-the-store",
      "category": "ngrx",
      "title": "don't put everything in the store",
      "content": "<h3>Problem</h3>\n<p><code>@ngrx/store</code> (or Redux in general) provides us with a lot of great features and can be used in a lot of use cases. But sometimes this pattern can be an overkill. Implementing it means we get the downside of using Redux (a lot of extra code and complexity) without benefiting of the upsides (predictable state container and unidirectional data flow).</p>\n<h3>Solution</h3>\n<p>The NgRx core team has come up with a principle called <strong>SHARI</strong>, that can be used as a rule of thumb on data that needs to be added to the store.</p>\n<ul>\n<li>Shared: State that is shared between many components and services</li>\n<li>Hydrated: State that needs to be persisted and hydrated across page reloads</li>\n<li>Available: State that needs to be available when re-entering routes</li>\n<li>Retrieved: State that needs to be retrieved with a side effect, e.g. an HTTP request</li>\n<li>Impacted: State that is impacted by other components</li>\n</ul>\n<p>Try not to over-engineer your state management layer. Data is often fetched via XHR requests or is being sent over a WebSocket, and therefore is handled on the server side. Always ask yourself <strong>when</strong> and <strong>why</strong> to put some data in a client side store and keep alternatives in mind. For example, use routes to reflect applied filters on a list or use a <code>BehaviorSubject</code> in a service if you need to store some simple data, such as settings. Mike Ryan gave a very good talk on this topic: <a href=\"https://youtu.be/omnwu_etHTY\">You might not need NgRx</a></p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=t3jx0EC-Y3c\">Reducing the Boilerplate with NgRx</a> by Mike Ryan and Brandon Roberts</li>\n<li><a href=\"https://blog.strongbrew.io/do-we-really-need-redux/\">Do we really need @ngrx/store</a> by Brecht Billiet</li>\n<li><a href=\"https://juristr.com/blog/2018/10/simple-state-management-with-scan/\">Simple State Management with RxJS’s scan operator</a> by Juri Strumpflohner</li>\n</ul>\n"
    },
    "1kimRN": {
      "id": "1kimRN",
      "slug": "dont-store-state-that-can-be-derived",
      "category": "ngrx",
      "title": "don't store state that can be derived",
      "content": "<h3>Problem</h3>\n<p>We can use <code>@ngrx/store</code> to store data. When we store duplicate data, we are making our reducer logic way more difficult. Take a look at the following type definition for a potential state object:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> ApplicationState {\n  users: <span class=\"hljs-built_in\">Array</span>&lt;User&gt;;\n  selectedUserId: <span class=\"hljs-built_in\">number</span>;\n  selectedUser: User;\n}\n</code></pre>\n<p>In this scenario, we are both storing the id of the <code>selectedUser</code> and the object of the <code>selectedUser</code>. This poses a lot of problems. First of all, when we change the selected user, we need to remember to update both references. But even worse, what if we update the user that is currently selected. Then we need to update both the reference in the <code>users</code> array and the <code>selectedUser</code>. This is easily overlooked and makes the implementation much more difficult and verbose.</p>\n<h3>Solution</h3>\n<p>To fix this, we <strong>shouldn’t store state that can be derived</strong>. If we store the <code>users</code> and the <code>selectedUserId</code>, we can easily derive which user is selected. This is logic that we can put in a selector or most probably in a composed selector. As a solution, we can define the state object as follows:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> ApplicationState {\n  users: <span class=\"hljs-built_in\">Array</span>&lt;User&gt;;\n  selectedUserId: <span class=\"hljs-built_in\">number</span>;\n}\n</code></pre>\n<p>Now, when we update a user, we only need to update the reference in the <code>users</code> array.</p>\n"
    },
    "ZlteSK": {
      "id": "ZlteSK",
      "slug": "reducers-are-pure-functions",
      "category": "ngrx",
      "title": "reducers are pure functions",
      "content": "<h3>Problem</h3>\n<p>Reducers are responsible for updating the state in our application based on actions. It is extremely important that these are pure making them deterministic, so that every action, given the same input, will always have the same result. If they are not pure, we can no longer trust them to manage our state.</p>\n<h3>Solution</h3>\n<p>By writing our reducers as pure functions, we are 100% sure that the reducer is deterministic and can be used to manage our state. A pure function has the following properties:</p>\n<ul>\n<li>it does not depend on external state</li>\n<li>it does not produce any side-effects</li>\n<li>it does not mutate any of its inputs</li>\n<li>if you call it over and over again, with the same arguments, you always get back the same results</li>\n</ul>\n<p>These properties are exactly what we need for our reducers to be deterministic and to comply with the key concepts of Redux.</p>\n<p>In addition, pure functions are very easy to test.</p>\n<p>Example of an <strong>impure</strong> function:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> state = <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">impureFunction</span>(<span class=\"hljs-params\">value: <span class=\"hljs-built_in\">number</span></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> value + state;\n}\n\n<span class=\"hljs-comment\">// Returns 2</span>\nimpureFunction(<span class=\"hljs-number\">1</span>);\n</code></pre>\n<p>The <code>impureFunction</code> relies on external state making it non-deterministic. We have no control of the state defined outside of the function as it is visible to many other functions.</p>\n<p>Instead, we can make this function <strong>pure</strong> by passing in the data it needs:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> state = <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pureFunction</span>(<span class=\"hljs-params\">value: <span class=\"hljs-built_in\">number</span>, otherValue: <span class=\"hljs-built_in\">number</span></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> value + otherValue;\n}\n\n<span class=\"hljs-comment\">// Returns 2</span>\npureFunction(<span class=\"hljs-number\">1</span>, state);\n</code></pre>\n<p>Now, <code>pureFunction</code> only relies on its parameters, does not mutate its arguments and has no side-effects.</p>\n<p>The same is true for reducers. They have the following signature <code>(state, action) =&gt; state</code>. They do not rely on external state and shouldn’t update its inputs.</p>\n"
    },
    "1t4mCT": {
      "id": "1t4mCT",
      "slug": "use-entity-pattern",
      "category": "ngrx",
      "title": "use the entity pattern for large collections",
      "content": "<h3>Problem</h3>\n<p>In our applications, we use a lot of arrays to store our data. When we fetch a list of users and we want to show them in the view, we can loop over them really easily using the <code>*ngFor</code> directive. We can put that data in our store so that we, for example, don’t have to fetch it again later, or if the list is impacted by other components.</p>\n<p>But arrays are not the most performant solution when we want to update, delete, or get a single element out of the list. All these operations have a linear time complexity of O(n). For large collections, this can have a huge impact on the performance.</p>\n<h3>Solution</h3>\n<p>To make the CRUD operations more efficient we can adopt the entity pattern. This means that we will no longer store the data as an array but transform it to an object where the key is the unique identifier of the element and the value is the actual element. This is also called state normalization.</p>\n<p>Here’s an example.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> contacts = [\n  { id: <span class=\"hljs-number\">1</span>, name: <span class=\"hljs-string\">'Dominic Elm'</span> },\n  { id: <span class=\"hljs-number\">2</span>, name: <span class=\"hljs-string\">'Kwinten Pisman'</span> }\n];\n</code></pre>\n<p>We can normalize this into the following:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> entities = {\n  <span class=\"hljs-number\">1</span>: { id: <span class=\"hljs-number\">1</span>, name: <span class=\"hljs-string\">'Dominic Elm'</span> },\n  <span class=\"hljs-number\">2</span>: { id: <span class=\"hljs-number\">2</span>, name: <span class=\"hljs-string\">'Kwinten Pisman'</span> }\n};\n</code></pre>\n<p>Now, finding, deleting, or updating an element all have a complexity of O(1).</p>\n<p><strong>Note:</strong> As this is a common pattern in NgRx, there is a separate package that will help us to implement the entity pattern called <code>@ngrx/entity</code>.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://github.com/ngrx/platform/tree/master/docs/entity\">@ngrx/entity</a></li>\n</ul>\n"
    },
    "Myhw4": {
      "id": "Myhw4",
      "slug": "use-selectors",
      "category": "ngrx",
      "title": "use selectors to select data from the store",
      "content": "<h3>Problem</h3>\n<p>When we want to fetch data from the store, we can use queries to get the data out. These queries are functions that have the following signature <code>(state: T) =&gt; K</code>.</p>\n<p>While retrieving state from the store, we can execute some pretty complex and potentially inefficient or blocking logic. Every time the state changes, this logic will be re-executed.</p>\n<p>Also, the plain queries we define cannot be used to compose new ones. This means that we have to define the same queries in multiple locations violating the DRY principle.</p>\n<h3>Solution</h3>\n<p><code>@ngrx/store</code> provides us with the concept of selectors. A selector helps us to build up queries that have a type signature of <code>(state: T): K</code>. The great benefit of these selectors is that they are composable.</p>\n<p><code>@ngrx/store</code> exposes a <code>createSelector</code> function that accepts other selectors to create new ones based on these. This means that we only have to define every selector just once and reuse them in multiple places.</p>\n<p>Let’s look at a simple example:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Plain Selector</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> selectFeature = <span class=\"hljs-function\">(<span class=\"hljs-params\">state: AppState</span>) =&gt;</span> state.feature;\n\n<span class=\"hljs-comment\">// Composed Selector</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> selectFeatureCount = createSelector(\n  selectFeature,\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">state: FeatureState</span>) =&gt;</span> state.counter\n);\n</code></pre>\n<p>Another benefit of composed selectors is that they use an optimization technique called memoization. This means that the selector logic will <strong>not</strong> be re-executed if the source selectors did not update. As a result, the complex logic we might execute to get data from the store is only executed when it is actually needed.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://github.com/ngrx/platform/blob/master/docs/store/selectors.md\">Selectors in Ngrx</a></li>\n<li><a href=\"https://blog.angularindepth.com/ngrx-parameterized-selector-e3f610529f8\">NgRx: Parameterized selectors</a> by Tim Deschryver</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Memoization\">Memoization</a></li>\n</ul>\n"
    },
    "ZfxFUd": {
      "id": "ZfxFUd",
      "slug": "track-by-option-on-ng-for",
      "category": "performance",
      "title": "use trackBy option on *ngFor",
      "source": "https://github.com/mgechev/angular-performance-checklist#use-trackby-option-for-ngfor-directive",
      "author": {
        "name": "Minko Gechev",
        "url": "https://twitter.com/mgechev"
      },
      "content": "<h3>Problem</h3>\n<p>The <code>*ngFor</code> directive is used for rendering a collection. By default <code>*ngFor</code> identifies object uniqueness by reference.</p>\n<p>Which means when developer breaks reference to object during updating item’s content Angular treats it as removal of the old object and addition of the new object. This effects in destroying old DOM node in the list and adding new DOM node on its place.</p>\n<h3>Solution</h3>\n<p>We can provide a hint for angular how to identify object uniqueness: custom tracking function as the <code>trackBy</code> option for the <code>*ngFor</code> directive. Tracking function takes two arguments: index and item. Angular uses the value returned from tracking function to track items identity. It is very common to use ID of the particular record as the unique key.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">@Component</span>({\n  selector: <span class=\"hljs-string\">'yt-feed'</span>,\n  template: <span class=\"hljs-string\">`\n    &lt;h1&gt;Your video feed&lt;/h1&gt;\n    &lt;yt-player *ngFor=\"let video of feed; trackBy: trackById\" [video]=\"video\"&gt;&lt;/yt-player&gt;\n  `</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> YtFeedComponent {\n  feed = [\n    {\n      id: <span class=\"hljs-number\">3849</span>, <span class=\"hljs-comment\">// note \"id\" field, we refer to it in \"trackById\" function</span>\n      title: <span class=\"hljs-string\">'Angular in 60 minutes'</span>,\n      url: <span class=\"hljs-string\">'http://youtube.com/ng2-in-60-min'</span>,\n      likes: <span class=\"hljs-string\">'29345'</span>\n    }\n    <span class=\"hljs-comment\">// ...</span>\n  ];\n\n  trackById(index, item) {\n    <span class=\"hljs-keyword\">return</span> item.id;\n  }\n}\n</code></pre>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html\">“NgFor directive”</a> - Official documentation for <code>*ngFor</code></li>\n<li><a href=\"https://netbasal.com/angular-2-improve-performance-with-trackby-cc147b5104e5\">“Angular  —  Improve performance with trackBy”</a> - By Netanel Basal</li>\n</ul>\n"
    },
    "CjbpO": {
      "id": "CjbpO",
      "slug": "use-aot-compilation",
      "category": "performance",
      "title": "use AOT compilation for prod builds",
      "source": "https://github.com/mgechev/angular-performance-checklist",
      "author": {
        "name": "Minko Gechev",
        "url": "https://twitter.com/mgechev"
      },
      "content": "<h3>Problem</h3>\n<p>The biggest part of the code that we ship to the browser when we use Angular is the compiler. The compiler is needed to transform our HTML-like templates to Javascript. This is doesn’t only has a negative impact on the bundle size but also on the performance as this process is computationally expensive.</p>\n<h3>Solution</h3>\n<p>We can avoid shipping the compiler by performing the compile step as part of the build step. We can achieve this by using AOT.</p>\n<p>AoT can be helpful not only for achieving more efficient bundling by performing tree-shaking, but also for improving the runtime performance of our applications. The alternative of AoT is Just-in-Time compilation (JiT) which is performed runtime, therefore we can reduce the amount of computations required for rendering of our application by performing the compilation as part of our build process.</p>\n<h3>Tooling</h3>\n<ul>\n<li><a href=\"https://github.com/angular/angular/tree/master/packages/compiler-cli\">@angular/compiler-cli</a> - a drop-in replacement for <a href=\"https://www.npmjs.com/package/typescript\">tsc</a> which statically analyzes our application and emits TypeScript/JavaScript for the component’s templates.</li>\n<li><a href=\"https://github.com/mgechev/angular-seed\">angular2-seed</a> - a starter project which includes support for AoT compilation.</li>\n<li><a href=\"https://cli.angular.io/\">Angular CLI</a> Using the ng serve --prod</li>\n</ul>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"http://blog.mgechev.com/2016/08/14/ahead-of-time-compilation-angular-offline-precompilation/\">Ahead-of-Time Compilation in Angular</a> by Minko Gechev</li>\n</ul>\n"
    },
    "FGjYL": {
      "id": "FGjYL",
      "slug": "use-on-push-cd-strategy",
      "category": "performance",
      "title": "use onPush CD strategy on dumb components",
      "content": "<h3>Problem</h3>\n<p>Change detection (CD) in Angular is performed from top to bottom. This means that everything is only checked once. This is a huge difference compared to AngularJS where change detection was performed in cycles until everything was considered stable.</p>\n<p>However, it still means that everything is checked every time CD is triggered, even things that we know for sure have not changed.</p>\n<h3>Solution</h3>\n<p>Angular components can use different strategies for change detection. They can either use <code>Default</code> or <code>OnPush</code>.</p>\n<p>The default strategy means that the component will be checked during every CD cycle.</p>\n<p>With the <code>OnPush</code> strategy, the component (and all of its children!) will only be checked if one of its <code>@Input</code>s have changed (reference check) <strong>or</strong> if an event was triggered within the component.</p>\n<p>This means that we can easily tell Angular to not run CD for huge parts of our component tree, speeding up CD a lot! We can enable the <code>OnPush</code> strategy like this:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">@Component</span>({\n  ...\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n</code></pre>\n<p><strong>Note 1:</strong> This also implies that we should always try to work immutable. Let’s say that we add an element to an array by mutating the array and we pass the array to a component to visualise it. If we apply the <code>OnPush</code> strategy for this component, we wouldn’t see the changes in the UI. Angular will not check if the array’s content has changed. It will only check the reference. As the reference has not changed, it means that CD will not run for that component and the view will not be updated.</p>\n<p><strong>Note 2:</strong> This also means that, every component we apply this strategy to, has to be dumb. If the component fetches its own data, we cannot have the <code>OnPush</code> strategy. Because in that case, the component’s <code>@Input</code>s wouldn’t be the only reason to run CD, but also data being fetched.</p>\n<p><strong>Note 3:</strong> When using the <code>async</code> pipe, it will automatically call <code>markForCheck</code> under the hood. This marks the path to that component as “to be checked”. When the next CD cycle kicks in, the path to that component is not disabled and the view will be updated.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html\">Angular change detection explained</a> by Pascal Precht</li>\n<li><a href=\"https://blog.angularindepth.com/everything-you-need-to-know-about-change-detection-in-angular-8006c51d206f\">Everything you need to know about change detection in Angular</a> by Maxim Koretskyi</li>\n</ul>\n"
    },
    "Zy4xtr": {
      "id": "Zy4xtr",
      "slug": "add-404-route",
      "category": "router",
      "title": "add 404 fallback route",
      "content": "<h3>Problem</h3>\n<p>There are multiple reasons why we need to make sure that we have a fallback for when a page is not found.</p>\n<ul>\n<li>Our users are humans. Humans are quite error-prone. This means that they are likely to mistype a url at some point.</li>\n<li>Over time, our applications will change. Users might bookmark urls for pages which are not supported anymore.</li>\n</ul>\n<h3>Solution</h3>\n<p>Every application should define a 404 route. This is a route to be shown whenever the user tries to go to a non existing route.</p>\n<pre class=\"hljs\"><code>[\n  ...,\n  { path: <span class=\"hljs-string\">'404'</span>, component: NotFoundComponent },\n  { path: <span class=\"hljs-string\">'**'</span>, redirectTo: <span class=\"hljs-string\">'/404'</span> },\n]\n</code></pre>\n<p>The last route definition uses a wildcard as a path. Since the Angular router will render the first definitions that matches, be sure to always put this route definition last!</p>\n"
    },
    "5ScV4": {
      "id": "5ScV4",
      "slug": "default-route",
      "category": "router",
      "title": "make sure default route is defined",
      "content": "<h3>Problem</h3>\n<p>When users type in the url for your application, they do not know all the routes of our application. We need to make sure that we always have a landing page or a redirect set up.</p>\n<h3>Solution</h3>\n<p>Every application should define a default route. This is the route that will be used whenever the user goes to <code>/</code>.</p>\n<pre class=\"hljs\"><code>[\n  { path: <span class=\"hljs-string\">''</span>, redirectTo: <span class=\"hljs-string\">'/heroes'</span>, pathMatch: <span class=\"hljs-string\">'full'</span> },\n  ...\n]\n</code></pre>\n<p>Note that <code>pathMatch: full</code> should be used to make sure that this route definitions is only triggered when the user is going to <code>/</code>.</p>\n"
    },
    "Z165VzV": {
      "id": "Z165VzV",
      "slug": "lazy-load-feature-modules",
      "category": "router",
      "title": "lazy load feature modules",
      "content": "<h3>Problem</h3>\n<p>When working with SPAs, we need to ship an entire application to the client. The more bytes we need to ship, the slower it will be to load but also to parse. This will greatly influence the TTI (Time to Interactive) of our application.</p>\n<p>We are shipping way too much JavaScript to the client.</p>\n<h3>Solution</h3>\n<p>Angular provides us with a module system. When we break up our application in feature modules, we can leverage this to only load the modules that are needed for the first page render. The other modules can be lazily loaded only when they are needed. We can do this, when the user requests them or via a more sophisticated preloading strategy.</p>\n<p>The following module is <strong>not</strong> using lazy loading to load the <code>UsersModule</code>.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// app.routing.ts</span>\n<span class=\"hljs-keyword\">const</span> routes: Routes = [\n  ...\n  {path: <span class=\"hljs-string\">'users'</span>, component: UsersComponent}\n  ...\n];\n\n<span class=\"hljs-comment\">// app.module.ts</span>\n<span class=\"hljs-meta\">@NgModule</span>({\n  declarations: [AppComponent],\n  imports: [\n    ...\n    UsersModule,\n    RouterModule.forRoot(routes),\n  ],\n  bootstrap: [AppComponent]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppModule {}\n</code></pre>\n<p>This means that the <code>UsersModule</code> will be added to the main bundle. The main bundle contains all the code that is needed for the first page load. As the <code>UsersModule</code> is only needed when the user specifically navigates to the <code>/users</code> page, it doesn’t make sense to load it up front. Let’s leverage lazy loading to fix this.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// app.routing.ts</span>\n<span class=\"hljs-keyword\">const</span> routes: Routes = [\n  ...\n  {\n    path: <span class=\"hljs-string\">'users'</span>,\n    loadChildren: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'../users/usersModule'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">m</span> =&gt;</span> m.UsersModule)\n  }\n  ...\n];\n\n<span class=\"hljs-comment\">// app.module.ts</span>\n<span class=\"hljs-meta\">@NgModule</span>({\n  declarations: [AppComponent],\n  imports: [\n    ...\n    RouterModule.forRoot(routes),\n  ],\n  bootstrap: [AppComponent]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppModule {}\n</code></pre>\n<p>We updated the <code>/users</code> route to use the <code>loadChildren</code> property. This uses the standard dynamic import syntax.\nCalled as a function, the import returns a promise which loads the module.</p>\n<p>Also note that we no longer add the <code>UsersModule</code> to the imports of the <code>AppModule</code>. This is important because otherwise lazy loading wouldn’t work as expected. If the <code>UsersModule</code> was referenced by the <code>AppModule</code> the code for that module would be added to the main bundle.</p>\n<p>By using <code>loadChildren</code> and removing the module import from the <code>AppModule</code>, the <code>UsersModule</code> will be packaged in its own bundle and will only be loaded when the user navigates to <code>/users</code>.</p>\n<h3>Resources</h3>\n<p><a href=\"https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4\">The cost of JavaScript</a> by Addy Osmani</p>\n"
    },
    "Z2nRe1e": {
      "id": "Z2nRe1e",
      "slug": "protect-restricted-pages-with-guards",
      "category": "router",
      "title": "protect restricted pages with guards",
      "content": "<h3>Problem</h3>\n<p>Users should not be able to access pages that they don’t have access to. We could hide the menu item so they could not navigate to it by clicking on that menu item but this means they can still manually type in the url to go to that page. We need some way to protect certain routes.</p>\n<h3>Solution</h3>\n<p>We can use guards to allow or deny route changes. Every part of your application that should be limited to users with certain roles should be protected with guards.</p>\n<p>We can create a guard by creating a service that implements the <code>CanActivate</code> interface to avoid users going to a certain component or a <code>canLoad</code> interface to avoid entire modules to be loaded.</p>\n<p>The following example shows how to use a <code>canActivate</code> guard.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> UserHasRoleGuard <span class=\"hljs-keyword\">implements</span> CanActivate {\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> activatedRoute</span>) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    <span class=\"hljs-comment\">// return an Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean;</span>\n  }\n}\n</code></pre>\n<p>We can now use it in our route definitions:</p>\n<pre class=\"hljs\"><code>[\n  ...,\n  { path: <span class=\"hljs-string\">'users'</span>, component: UsersComponent, canActivate: [UserHasRoleGuard] },\n]\n</code></pre>\n<p>You can see that the <code>canActivate</code> property on the route definition takes an array. This means we can add multiple guards which will be called chronologically in the order they are defined.</p>\n"
    },
    "lGMp8": {
      "id": "lGMp8",
      "slug": "use-preloading-strategy",
      "category": "router",
      "title": "use preloading strategy",
      "content": "<h3>Problem</h3>\n<p>When we use lazy loading, we are only loading the code that is needed for the first page render. Modules that are not yet needed are not loaded.</p>\n<p>By default, the next modules will be loaded whenever the user requests them. This is not ideal in every scenario because it means that whenever a user requests a url, they have to wait until the module is loaded and parsed.</p>\n<h3>Solution</h3>\n<p>Depending on the application you are building and whether you have to deal with low bandwidth, it might be better to use a different strategy other than loading modules on request.</p>\n<p>When working on an application that will be used only on a steady WiFi connection, it makes sense to preload all of the modules when the CPU is idle. If our application will be used mainly on a slow 3G connection, we should only load the modules that are most likely used.</p>\n<h4>Load all modules after first page render</h4>\n<p>One strategy provided by the Angular team is to preload all modules when the CPU becomes idle. This means that, after the first page render, the modules will all be loaded in the background.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">@NgModule</span>({\n  imports: [\n    ...modules,\n    RouterModule.forRoot(routes, {\n      preloadingStrategy: PreloadAllModules\n    })\n  ],\n  ...\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppModule {}\n</code></pre>\n<h4>Defining a custom preloading strategy</h4>\n<p>If our users can be both on mobile and on WiFi, it might make sense to only preload the modules if they are on WiFi. To do this, we can implement a custom preloading strategy.</p>\n<p>A custom preloading strategy is implemented as a class and implements the <code>PreloadingStrategy</code> interface.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// custom.preloading-strategy.ts</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> MyCustomPreloadingStrategy <span class=\"hljs-keyword\">implements</span> PreloadingStrategy {\n  preload(route: Route, load: <span class=\"hljs-built_in\">Function</span>): Observable&lt;<span class=\"hljs-built_in\">any</span>&gt; {\n    <span class=\"hljs-comment\">// Implement your strategy here</span>\n  }\n}\n\n<span class=\"hljs-comment\">// app.module.ts</span>\n<span class=\"hljs-meta\">@NgModule</span>({\n  imports: [\n    ...modules,\n    <span class=\"hljs-comment\">// Custom Preloading Strategy</span>\n    RouterModule.forRoot(routes, { preloadingStrategy: MyCustomPreloadingStrategy });\n  ],\n  ...\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppModule {}\n</code></pre>\n<h4>Data-driven bundling</h4>\n<p>Another way is to use <a href=\"https://github.com/guess-js/guess\">Guess.js</a>, a data-driven bundling approach. The goal with Guess.js is to minimize the bundle layout configuration, make it data-driven, and much more accurate. Guess.js will will figure out which bundles to be combined together and what pre-fetching mechanism to be used.</p>\n<p>Guess.js can also be used with the Angular CLI. Here’s an <a href=\"https://github.com/mgechev/guess-js-angular-demo\">example</a>.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://vsavkin.com/angular-router-preloading-modules-ba3c75e424cb\">Angular Router: Preloading Modules</a> by Victor Savkin</li>\n<li><a href=\"https://blog.mgechev.com/2018/05/09/introducing-guess-js-data-driven-user-experiences-web/\">Introducing Guess.js - a toolkit for enabling data-driven user-experiences on the Web</a> by Minko Gechev</li>\n</ul>\n"
    },
    "Z1eFwa9": {
      "id": "Z1eFwa9",
      "slug": "avoid-nested-subscriptions",
      "category": "rxjs",
      "title": "avoid nested subscriptions",
      "content": "<h3>Problem</h3>\n<p>Sometimes we need to aggregate values from multiple observables or deal with nested observables to perform an action. In that case, you could  subscribe to an observable in the subscribe block of another observable. This makes handling subscriptions way more difficult and feels like callback hell all over again.</p>\n<h3>Solution</h3>\n<p>For aggregating values or dealing with nested observables we can use one of the combination or flattening operators.</p>\n<p>Let’s consider the following example: In an e-commerce system we are fetching a product and based on that product we want to fetch similar ones.</p>\n<p>A naive solution could look like this:</p>\n<pre class=\"hljs\"><code>fetchProduct(<span class=\"hljs-number\">1</span>).subscribe(<span class=\"hljs-function\"><span class=\"hljs-params\">product</span> =&gt;</span> {\n  fetchSimilarProducts(product).subscribe(<span class=\"hljs-function\"><span class=\"hljs-params\">similarProducts</span> =&gt;</span> {\n    ...\n  });\n});\n</code></pre>\n<p>We first fetch the product and once the request is resolved we fetch similar products inside the subscribe block of the first, most outer observable.</p>\n<p>This is considered to be an anti-pattern or code smell.</p>\n<p>Instead we can use one of the flattening operators to get rid of this code smell and solve it more elegantly:</p>\n<pre class=\"hljs\"><code>fetchProduct(<span class=\"hljs-number\">1</span>).pipe(\n  switchMap(<span class=\"hljs-function\"><span class=\"hljs-params\">product</span> =&gt;</span> fetchSimilarProducts(product))\n).subscribe(...)\n</code></pre>\n<p>Here’s another example: A simple list view where the user can filter and paginate the list. Whenever the user goes to the next page we also need to take into account the filter:</p>\n<p>Naive solution:</p>\n<pre class=\"hljs\"><code>nextPage$.subscribe(<span class=\"hljs-function\"><span class=\"hljs-params\">page</span> =&gt;</span> {\n  filter$.pipe(take(<span class=\"hljs-number\">1</span>)).subscribe(<span class=\"hljs-function\"><span class=\"hljs-params\">filter</span> =&gt;</span> {\n    fetchData(page, filter).subscribe(<span class=\"hljs-function\"><span class=\"hljs-params\">items</span> =&gt;</span> {\n      <span class=\"hljs-keyword\">this</span>.items = items;\n    });\n  });\n});\n</code></pre>\n<p>That’s again not the most idiomatic solution because we have introduced several nested subscriptions.</p>\n<p>Let’s fix this with a combination and flattening operator:</p>\n<pre class=\"hljs\"><code>nextPage$\n  .pipe(\n    withLatestFrom(filter$),\n    switchMap(<span class=\"hljs-function\">(<span class=\"hljs-params\">[page, filter]</span>) =&gt;</span> fetchData(page, filter))\n  )\n  .subscribe(<span class=\"hljs-function\"><span class=\"hljs-params\">items</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">this</span>.items = items;\n  });\n</code></pre>\n<p>Or when we want to listen for changes in both the <code>nextPage$</code> and the <code>filter$</code> we could use <code>combineLatest</code>:</p>\n<pre class=\"hljs\"><code>combineLatest(nextPage$, filter$)\n  .pipe(switchMap(<span class=\"hljs-function\">(<span class=\"hljs-params\">[page, filter]</span>) =&gt;</span> fetchData(page, filter)))\n  .subscribe(<span class=\"hljs-function\"><span class=\"hljs-params\">items</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">this</span>.items = items;\n  });\n</code></pre>\n<p>Both solutions are much more readable and they also reduces the complexity of our code.</p>\n<p>Here are some very common combination and flattening operators:</p>\n<p><strong>Combination Operators</strong>:</p>\n<ul>\n<li><code>combineLatest</code></li>\n<li><code>withLatestFrom</code></li>\n<li><code>merge</code></li>\n<li><code>concat</code></li>\n<li><code>zip</code></li>\n<li><code>forkJoin</code></li>\n<li><code>pairwise</code></li>\n<li><code>startWith</code></li>\n</ul>\n<p><strong>Flattening Operators</strong>:</p>\n<ul>\n<li><code>switchMap</code></li>\n<li><code>mergeMap</code></li>\n<li><code>concatMap</code></li>\n<li><code>exhaustMap</code></li>\n</ul>\n"
    },
    "ZzpwmT": {
      "id": "ZzpwmT",
      "slug": "pipeable-operators",
      "category": "rxjs",
      "title": "use pipeable operators",
      "content": "<h3>Problem</h3>\n<p>Since the release of RxJS 6, patch operators have been removed. This means that we can no longer use them.</p>\n<p>This means the following is no longer possible:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/observable/interval'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/map'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/filter'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/switchMap'</span>;\n\nObservable.interval(<span class=\"hljs-number\">1000</span>)\n  .filter(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>)\n  .map(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x*<span class=\"hljs-number\">2</span>)\n  .switchMap(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> mapToObservable(x))\n</code></pre>\n<h3>Solution</h3>\n<p>Instead, we should be using pipeable operators.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { interval } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs'</span>;\n<span class=\"hljs-keyword\">import</span> { filter, map, switchMap } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/operators'</span>;\n\nObservable.interval(<span class=\"hljs-number\">1000</span>)\n  .pipe(\n    filter(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>),\n    map(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x*<span class=\"hljs-number\">2</span>),\n    switchMap(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> mapToObservable(x)),\n  );\n</code></pre>\n<p>Even if you are using the older versions of RxJS, all new code should be written using pipeable operators.</p>\n<h4>Upgrading</h4>\n<p>If you have a lot of code written using patch operators, you can use a script released written by Google engineers to do this upgrade automatically for you. You can find the script and how to use it in the <a href=\"https://github.com/ReactiveX/rxjs-tslint#migration-to-rxjs-6\">rxjs-tslint</a> package.</p>\n"
    },
    "Iqkhs": {
      "id": "Iqkhs",
      "slug": "takeuntil-operator",
      "category": "rxjs",
      "title": "don't manage subscriptions imperatively",
      "content": "<h3>Problem</h3>\n<p>When we subscribe to an Observable, we also need to unsubscribe to clean up its resources. Unsubscribing can be done like this:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// hold a reference to the subscription object</span>\n<span class=\"hljs-keyword\">const</span> subscription = interval(<span class=\"hljs-number\">1000</span>).subscribe(<span class=\"hljs-built_in\">console</span>.log);\n\n<span class=\"hljs-comment\">// use the subscription object to kill the subscription</span>\nsubscription.unsubscribe();\n</code></pre>\n<p>But if we have multiple subscriptions, we need to manage all of them. We could do this in an array but this gets extremely verbose. We want to avoid having to do this imperatively.</p>\n<h3>Solution</h3>\n<p>RxJS provides us with the <code>takeUntil</code> operator, and a few other conditional operators. This operator will mirror the source observable until a certain event happens. In most cases, we want to stop listening to Observables when the component gets destroyed. This allows us to write something like this:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">@Component</span>({...})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> SomeComponent <span class=\"hljs-keyword\">implements</span> OnInit, OnDestroy {\n  <span class=\"hljs-keyword\">private</span> destroy$ = <span class=\"hljs-keyword\">new</span> Subject();\n  users: <span class=\"hljs-built_in\">Array</span>&lt;User&gt;;\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> usersService: UsersService</span>) {}\n\n  ngOnInit() {\n    <span class=\"hljs-comment\">// long-living stream of users</span>\n    <span class=\"hljs-keyword\">this</span>.usersService.getUsers()\n     .pipe(\n       takeUntil(<span class=\"hljs-keyword\">this</span>.destroy$)\n     )\n     .subscribe(\n       <span class=\"hljs-function\"><span class=\"hljs-params\">users</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>.users = users;\n     );\n   }\n\n   ngOnDestroy() {\n     <span class=\"hljs-keyword\">this</span>.destroy$.next();\n   }\n}\n</code></pre>\n<p>We create a <code>Subject</code> called <code>destroy$</code> and when the <code>ngOnDestroy</code> hook is called, we <code>next</code> a value onto the subject.</p>\n<p>The manual subscribe we defined in the <code>ngOnInit</code> hook uses the <code>takeUntil</code> operator in combination with our subject. This means that the subscription will remain active <strong>until</strong> <code>destroy$</code> emits a value. After that, it will unsubscribe from the source stream and complete it.</p>\n<p>This is a lot better than imperatively handling the subscriptions.</p>\n<p><strong>Note:</strong> Using the <code>async</code> pipe is even better as we don’t have to think about this at all. It will hook into the destroy lifecycle hook and unsubscribe for us.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://medium.com/@benlesh/rxjs-dont-unsubscribe-6753ed4fda87\">RxJS: don’t unsubscribe</a> by Ben Lesh</li>\n<li><a href=\"https://blog.angularindepth.com/rxjs-avoiding-takeuntil-leaks-fb5182d047ef\">RxJS: Avoiding takeUntil leaks</a> by Nicholas Jamieson</li>\n</ul>\n"
    },
    "Z3uGQp": {
      "id": "Z3uGQp",
      "slug": "use-async-pipe",
      "category": "rxjs",
      "title": "use the async pipe",
      "content": "<h3>Problem</h3>\n<p>In Angular, everything async is handled by Observables and they are triggered by subscribing to them. Whenever we do so, it is very important to also unsubscribe. Unsubscribing will clean up the resources being used by this stream. If we neglect to do this, we might introduce memory leaks.</p>\n<p>If we manually subscribe, it also means that we have to manually unsubscribe. This is something that is easily forgotten.</p>\n<h3>Solution</h3>\n<p>Instead of manually subscribing, we can use the <code>async</code> pipe provided by Angular.</p>\n<p>The async pipe will:</p>\n<ul>\n<li>subscribe to an Observable</li>\n<li>unsubscribe from the Observable when the component is destroyed by hooking into the <code>onDestroy</code> hook</li>\n<li>mark this component as “to be checked” for the next change detection cycle</li>\n</ul>\n<p>Using the <code>async</code> pipe as much as possible will make sure all the resources are cleaned up properly and reduce the likelihood of memory leaks.</p>\n<p>Here’s an example:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">@Component</span>({\n  template: <span class=\"hljs-string\">`{{data$ | async}}`</span>,\n  ...\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> SomeComponent {\n  data$ = interval(<span class=\"hljs-number\">1000</span>);\n}\n</code></pre>\n<p>Here, we set up an <code>interval</code> that emits a value every second. This is a long-living Observable and because we are using the <code>async</code> pipe, the resource (subscription) is cleaned up when the component is destroyed.</p>\n<h3>Resources</h3>\n<p><a href=\"https://blog.thoughtram.io/angular/2017/02/27/three-things-you-didnt-know-about-the-async-pipe.html\">Three things you didn’t know about the async pipe</a> by Christoph Burgdorf</p>\n"
    },
    "fztee": {
      "id": "fztee",
      "slug": "use-ngifas",
      "category": "rxjs",
      "title": "use ngIfAs to subscribe only once",
      "content": "<h3>Problem</h3>\n<p>An Observable is lazy and unicast by default. This means that for every subscription, the Observable is executed. If the Observable is triggering a backend call when subscribed to, the following code will trigger two backend calls.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">@Component</span>({\n  &lt;some-component data=<span class=\"hljs-string\">\"data$ | async\"</span>&gt;&lt;<span class=\"hljs-regexp\">/some-component&gt;\n  &lt;some-other-component data=\"data$ | async\"&gt;&lt;/</span>some-component&gt;\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> SomeComponent <span class=\"hljs-keyword\">implements</span> OnInit, OnDestroy {\n  data$;\n  ...\n}\n</code></pre>\n<p>This is not the intended behavior. We want to fetch the data only once.</p>\n<h3>Solution</h3>\n<p>We can fix this problem in multiple ways, either with the <code>ngIfAs</code> syntax, or by making our Observable hot.</p>\n<h4>ngIfAs syntax</h4>\n<p>We can use an <code>*ngIf</code> to hide an element. We can also leverage it to <em>unpack</em> an observable and bind the value to a variable. We can then use that variable inside of the template.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">@Component</span>({\n  &lt;div *ngIf=<span class=\"hljs-string\">\"data$ | async as data\"</span>&gt;\n    &lt;some-component data=<span class=\"hljs-string\">\"data\"</span>&gt;&lt;<span class=\"hljs-regexp\">/some-component&gt;\n    &lt;some-other-component data=\"data\"&gt;&lt;/</span>some-component&gt;\n  &lt;<span class=\"hljs-regexp\">/div&gt;\n})\nexport class SomeComponent implements OnInit, OnDestroy {\n  data$;\n  ...\n}\n</span></code></pre>\n<p>By wrapping the components with a div that hides the element if no data is present, we were able to reduce the number of subscriptions from 2 to 1. This means that we only have a single subscription. Using the <code>as</code> syntax, we can also <em>catch</em> the event from that observable and bind it to a variable and use that variable to pass it to our components.</p>\n<p>Better yet, if we don’t want to introduce another level of nesting, we can use the <code>&lt;ng-container&gt;</code> element. This elements lets us group sibling elements under an invisible container element that is not rendered.</p>\n<p>Here’s what the code from above looks like using <code>&lt;ng-container&gt;</code>:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">@Component</span>({\n  &lt;ng-container *ngIf=<span class=\"hljs-string\">\"data$ | async as data\"</span>&gt;\n    &lt;some-component data=<span class=\"hljs-string\">\"data\"</span>&gt;&lt;<span class=\"hljs-regexp\">/some-component&gt;\n    &lt;some-other-component data=\"data\"&gt;&lt;/</span>some-component&gt;\n  &lt;<span class=\"hljs-regexp\">/ng-container&gt;\n})\nexport class SomeComponent implements OnInit, OnDestroy {\n  data$;\n  ...\n}\n</span></code></pre>\n<p>Now, the template will be rendered as:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">some-component</span> <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">\"data\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">some-component</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">some-other-component</span> <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">\"data\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">some-component</span>&gt;</span>\n</code></pre>\n<h4>Make the Observable hot</h4>\n<p>We can also make our Observable hot so that the Observable will no longer trigger a backend call with every subscription. A hot Observable will share the underlying subscription so the source Observable is only executed once.</p>\n<p>This fixes our problem because it means it doesn’t matter anymore if we have multiple subscriptions.</p>\n<p>To do this, we can use for example the <code>shareReplay</code> operator.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">@Component</span>({\n  &lt;some-component data=<span class=\"hljs-string\">\"sharedData$ | async\"</span>&gt;&lt;<span class=\"hljs-regexp\">/some-component&gt;\n  &lt;some-other-component data=\"sharedData$ | async\"&gt;&lt;/</span>some-component&gt;\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> SomeComponent <span class=\"hljs-keyword\">implements</span> OnInit, OnDestroy {\n  sharedData$ = data$.pipe(\n    shareReplay({ bufferSize: <span class=\"hljs-number\">1</span>, refCount: <span class=\"hljs-literal\">true</span> })\n  );\n  ...\n}\n</code></pre>\n<blockquote>\n<p>Note: we should specify <code>refCount: true</code> to prevent possible memory leaks.</p>\n</blockquote>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://blog.strongbrew.io/multicasting-operators-in-rxjs/\">Multicasting operators in RxJS</a> by Kwinten Pisman</li>\n</ul>\n"
    },
    "Z1vCEKO": {
      "id": "Z1vCEKO",
      "slug": "use-switchMap-only-when-you-need-cancellation",
      "category": "rxjs",
      "title": "use switchMap only when you need cancellation",
      "content": "<h3>Problem</h3>\n<p>In certain scenarios, using the wrong flattening operators from RxJS can result in unwanted behavior and race conditions.</p>\n<h3>Solution</h3>\n<p>For example, in an e-commerce application users can add and remove items from their shopping cart. The logic for removing an item could look like this:</p>\n<pre class=\"hljs\"><code>removeItemButtonClick.pipe(\n  switchMap(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>.backend.removeFromCart(item.id))\n)\n</code></pre>\n<p>Whenever the user clicks on the button to remove a certain item from the shopping cart, this action is forwarded to the application’s backend. Most of the times this works as expected. However, the behavior depends on how rapidly items are removed from the cart. For example, either all items could be removed, or only some of them.</p>\n<p>In this example, <code>switchMap</code> is not the right operator because for every new action it will abort / cancel the previous action. This behavior makes <code>switchMap</code> unsafe for create, update and delete actions.</p>\n<p>There are several other flattening operators that may be more appropriate:</p>\n<ul>\n<li><code>mergeMap</code>: concurrently handle all emissions</li>\n<li><code>concatMap</code>: handle emissions one after the other</li>\n<li><code>exhaustMap</code>: when you want to cancel new emissions while processing a previous emission</li>\n</ul>\n<p>So we could fix the problem from above by <code>mergeMap</code>:</p>\n<pre class=\"hljs\"><code>removeItemButtonClick.pipe(\n  mergeMap(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>.backend.removeFromCart(item.id))\n)\n</code></pre>\n<p>If the order is important we could use <code>concatMap</code>.</p>\n<p>For more information see the article from <a href=\"https://twitter.com/ncjamieson\">Nicholas Jamieson</a> listed below.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://blog.angularindepth.com/switchmap-bugs-b6de69155524\">RxJS: Avoiding switchMap-Related Bugs</a> by Nicholas Jamieson</li>\n</ul>\n"
    },
    "Z1uf1Rj": {
      "id": "Z1uf1Rj",
      "slug": "compodoc",
      "category": "tooling",
      "title": "use compodoc for documentation",
      "optional": true,
      "content": "<h3>Problem</h3>\n<p>On boarding of new developers in your project can be quite difficult. Especially if the applications are getting bigger and bigger.</p>\n<p>When the project becomes really big, even for developers that have been working on it for a long time, keeping an overview is not that easy.</p>\n<h3>Solution</h3>\n<p>Documentation for our code is the solution to this problem. Of course, everyone knows that writing documentation is hard, boring and the documentation itself gets out of date quite quickly.</p>\n<p>To fix this, we can use compodoc to generate documentation from our code. This means that it doesn’t take any time to write and it can never get out of date as it is generated from the existing code at all times.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://compodoc.app/\">Compodoc</a></li>\n</ul>\n"
    },
    "Z2fVpC5": {
      "id": "Z2fVpC5",
      "slug": "use-angular-cli",
      "category": "tooling",
      "title": "use @angular/cli",
      "optional": true,
      "content": "<h3>Problem</h3>\n<p>When we ship our code to the browsers, our code needs to be optimised, bundled, minified, uglified and much more. There are also other steps involved in a proper build process. This can be quite a difficult and cumbersome task to do and especially to maintain.</p>\n<h3>Solution</h3>\n<p>To fix this, we should use the <code>@angular/cli</code> to take over the build process. The Angular CLI simplifies the development of your Angular applications drastically. Aside from the build process, the CLI also provides you with code scaffolding which you can use to easily generate entire projects, components and much more.</p>\n<p>The CLI abstracts everything for us. This also means that when there are better solutions available to for example perform the build process, and if they integrate this, we get this update without putting any effort in. Since version 6, it also possible to hook into the entire build process via builders.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://cli.angular.io/\">Angular CLI</a></li>\n<li><a href=\"https://medium.com/dailyjs/angular-cli-6-under-the-hood-builders-demystified-f0690ebcf01\">Angular CLI under the hood - builders demystified</a> by Evgeny Barabanov</li>\n</ul>\n"
    },
    "PWWcx": {
      "id": "PWWcx",
      "slug": "use-prettier",
      "category": "tooling",
      "title": "use prettier for code formatting",
      "content": "<h3>Problem</h3>\n<p>Whenever we write code, we want this code to be formatted in a standardised way. This poses two problems.</p>\n<ul>\n<li>We need to align everyone in the team to agree with the same standards.</li>\n<li>We need to get all of their IDE’s/editors aligned as well. This can be extremely difficult.</li>\n</ul>\n<h3>Solution</h3>\n<p>Prettier is an opinionated code formatter that can fix both of these problems. It imposes a standard way of formatting and it has a CLI that makes sure the formatting happens the same way on all environments. Adding Prettier and running it as a pre-commit hook will make sure only formatted code can be checked in.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://prettier.io/\">Prettier</a></li>\n<li><a href=\"https://github.com/schuchard/prettier-schematic\">Add prettier to Angular CLI schematic</a></li>\n</ul>\n"
    },
    "Z2hzSxp": {
      "id": "Z2hzSxp",
      "slug": "avoid-using-any",
      "category": "typescript",
      "title": "avoid using any",
      "content": "<h3>Problem</h3>\n<p>TypeScript allows us to write code that is statically type checked. This provides huge benefits. It helps us during development with auto completion, it simplifies working with third party libraries, helps us to refactor our code, spots errors during development that would have otherwise been runtime errors and much more.</p>\n<p>If we start using the <code>any</code> type, we lose all these benefits.</p>\n<h3>Solution</h3>\n<p>The solution is to avoid the <code>any</code> type wherever possible in our code and we should define proper types instead.</p>\n<p>Here’s a classic example:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> x: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">var</span> y: <span class=\"hljs-built_in\">any</span> = <span class=\"hljs-string\">\"a\"</span>;\nx = y;\n</code></pre>\n<p>See how we assign a string to <code>x</code> although <code>x</code> is defined as a <code>number</code>? That’s a nightmare.</p>\n<p>Let’s look at another example:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> x: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">const</span> y: <span class=\"hljs-built_in\">any</span> = <span class=\"hljs-string\">'a'</span>;\n<span class=\"hljs-keyword\">const</span> z = x + y;\n\n<span class=\"hljs-comment\">// Prints out 10a</span>\n<span class=\"hljs-built_in\">console</span>.log(z);\n</code></pre>\n<p>In the last example we add <code>x</code> and <code>y</code> together, and typing <code>y</code> as <code>any</code>, TypeScript cannot really help us and avoid this bug at development time. Basically, we end up with a concatenation and we’re essentially back in JavaScriptLand.</p>\n<h4>Compiler Options</h4>\n<p>Set the compiler <code>–noImplicitAny</code> flag. With this flag enabled the compiler will complain if anything has an implicit type of <code>any</code>.</p>\n<h4>3rd party libraries</h4>\n<p>When working with 3rd party libraries that are written in vanilla JavaScript, we most likely don’t have type information available. Luckily there is an initiative to create type definitions for those libraries. If it exists, you can find it by installing the type package via <code>yarn add --dev @types/${library-name}</code>.</p>\n<p>If this does not exist yet, you can create one yourself. Contributions are always welcome and appreciated.</p>\n"
    },
    "23KPo0": {
      "id": "23KPo0",
      "slug": "define-interfaces-for-models",
      "category": "typescript",
      "title": "define interfaces for models",
      "content": "<h3>Problem</h3>\n<p>TypeScript helps us to create type safe code. When working with REST APIs, we will get back data (a DTO) at runtime that has a specific format. In case we don’t define types in our code for the objects we expect to get back, we lose the benefit of TypeScript.</p>\n<h3>Solution</h3>\n<p>We should define our models or DTOs (Data Transfer Objects) as interfaces instead of classes. Interfaces are virtual structures that only exist within the context of TypeScript. This means an interface does not generate code whereas a class is primarily syntactical sugar over JavaScript’s existing prototype-based inheritance. Consequently, a class generates code when it’s compiled to JavaScript.</p>\n<p>For example, if we make a backend request that will return an a user object with the properties <code>userName</code> and <code>password</code>, both strings, we can define an interface <code>User</code> that describes the shape of the response:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> User {\n  userName: <span class=\"hljs-built_in\">string</span>;\n  password: <span class=\"hljs-built_in\">string</span>;\n}\n</code></pre>\n"
    },
    "12Aq23": {
      "id": "12Aq23",
      "slug": "define-types-at-the-non-typed-boundaries",
      "category": "typescript",
      "title": "define types at the non-typed boundaries",
      "content": "<h3>Problem</h3>\n<p>All our JavaScript code is written in TypeScript. This means that we can leverage types. However, our codes interacts with different non-typed boundaries such as the HTML layer (think of events) and backend requests. Interacting with these boundaries influences the type safety of our code.</p>\n<h3>Solution</h3>\n<p>When interacting with these boundaries, it is important to add type information so TypeScript knows the structure of the objects we are dealing with. By providing the type right at the boundary, TypeScript is able to infer it everywhere else where that variable is being used.</p>\n<p>For example when working with custom events:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">@Component</span>({\n  template: <span class=\"hljs-string\">`&lt;some-other-component (someEvent)=\"someEventHandler($event)\"&gt;&lt;/some-other-component&gt;`</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> SomeComponent {\n  someEventHandler(event: TypeForThisEvent) {\n    ...\n  }\n}\n</code></pre>\n<p><code>TypeForThisEvent</code> will make sure that the non-typed HTML event is typed inside of our TypeScript code.</p>\n"
    },
    "ZRBVWY": {
      "id": "ZRBVWY",
      "slug": "move-common-types-to-interfaces",
      "category": "typescript",
      "title": "move common types to interfaces",
      "content": "<h3>Problem</h3>\n<p>With Typescript, we can easily add types to our code like this:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> user: { userName: <span class=\"hljs-built_in\">string</span>; password: <span class=\"hljs-built_in\">string</span> };\n</code></pre>\n<p>In this case, we defined the type of our user <em>inline</em>. While this is a valid option, it also means that it’s not reusable. We could define it in multiple places. The downside here is that, when it is updated, we have to update multiple places.</p>\n<h3>Solution</h3>\n<p>Whenever a type is reused in multiple places, it is recommended to move it into a separate interface.</p>\n<p>For example, we could define an interface <code>User</code>:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> User {\n  userName: <span class=\"hljs-built_in\">string</span>;\n  password: <span class=\"hljs-built_in\">string</span>;\n}\n</code></pre>\n"
    },
    "ZEhkug": {
      "id": "ZEhkug",
      "slug": "use-type-inference",
      "category": "typescript",
      "title": "use type inference",
      "content": "<h3>Problem</h3>\n<p>Typescript is really good at inferring the types in our code. Whenever it can do that, we don’t have to add the types ourselves.</p>\n<p>If we do add them everywhere, it doesn’t only take a lot of time, but it also means that we have to update them everywhere whenever anything changes.</p>\n<h3>Solution</h3>\n<p>In TypeScript, we want to take advantage of type inference as much as possible. TypeScript uses this to to provide type information when there is no explicit type annotation.</p>\n<p>Here’s an example:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> x: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-keyword\">const</span> y: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">'typescript will automatically infer the string type'</span>;\n</code></pre>\n<p>In both cases, the type is inferred when initializing the variables.</p>\n<p>To keep this code clean, we can omit the type information and use the type inference to automatically provide type information.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-keyword\">const</span> y = <span class=\"hljs-string\">'typescript will automatically infer the string type'</span>;\n</code></pre>\n<p>Type inference does not only take place when initializing variables but also when initializing class members, setting parameter default values, and determining function return types.</p>\n"
    }
  }
}